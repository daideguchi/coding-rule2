#!/bin/bash
# 🤖 AI組織管理システム v2.0
# プレジデント、ボス、ワーカーの4画面AI組織システム

set -e

# 色付きログ関数
log_info() {
    echo -e "\033[1;32m[INFO]\033[0m $1"
}

log_success() {
    echo -e "\033[1;34m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[1;31m[ERROR]\033[0m $1"
}

log_warn() {
    echo -e "\033[1;33m[WARN]\033[0m $1"
}

# 基本ディレクトリ設定
AGENTS_DIR="ai-agents"
LOGS_DIR="$AGENTS_DIR/logs"
SESSIONS_DIR="$AGENTS_DIR/sessions"
INSTRUCTIONS_DIR="$AGENTS_DIR/instructions"
TMP_DIR="$AGENTS_DIR/tmp"

# 必要ディレクトリの作成
init_directories() {
    mkdir -p "$LOGS_DIR" "$SESSIONS_DIR" "$INSTRUCTIONS_DIR"
    log_info "📁 ディレクトリ構造を初期化しました"
}

# セッションファイルの作成
create_session() {
    local role=$1
    local session_file="$SESSIONS_DIR/${role}_session.json"
    local timestamp=$(date -Iseconds)
    
    cat > "$session_file" << EOF
{
  "role": "$role",
  "session_id": "$(uuidgen 2>/dev/null || echo "session_$(date +%s)")",
  "start_time": "$timestamp",
  "status": "active",
  "messages": [],
  "context": {
    "current_task": null,
    "priority": "normal",
    "dependencies": []
  }
}
EOF
    
    log_success "📝 ${role} セッションを作成しました: $session_file"
}

# AI役割の対話システム（実際のClaude Code使用）
start_ai_chat() {
    local role=$1
    local instruction_file="$INSTRUCTIONS_DIR/${role}.md"
    local session_file="$SESSIONS_DIR/${role}_session.json"
    local log_file="$LOGS_DIR/${role}.log"
    
    if [ ! -f "$instruction_file" ]; then
        log_error "❌ 指示書が見つかりません: $instruction_file"
        return 1
    fi
    
    clear
    local role_upper=$(echo "$role" | tr '[:lower:]' '[:upper:]')
    echo "🤖 AI組織システム - ${role_upper} 対話モード"
    echo "=================================================="
    echo ""
    cat "$instruction_file"
    echo ""
    echo "=================================================="
    echo "💬 Claude Code起動中...（自動認証・権限スキップ）"
    echo ""
    
    # ログ開始
    echo "$(date): ${role} Claude Code セッション開始" >> "$log_file"
    
    # Claude Codeを高度な自動化で起動（stdin エラー対応）
    if [ -f "./ai-agents/claude-stdin-fix.sh" ]; then
        # stdin エラー修正スクリプトを使用
        ./ai-agents/claude-stdin-fix.sh auto "$(tmux display-message -p '#S')" "$(tmux display-message -p '#P')"
    elif [ -f "./ai-agents/claude-auto-bypass.sh" ]; then
        # 従来の自動化スクリプトを使用
        ./ai-agents/claude-auto-bypass.sh advanced "$(tmux display-message -p '#S')" "$(tmux display-message -p '#P')"
    else
        # フォールバック
        printf "2\n" | claude --dangerously-skip-permissions < /dev/null
    fi
}

# AI応答生成（シミュレート版）
generate_ai_response() {
    local role=$1
    local input=$2
    
    case "$role" in
        "president")
            echo "プレジデントとして承知しました。「$input」について戦略的に検討し、適切な指示をボスに伝達します。"
            ;;
        "boss")
            echo "ボスとして了解しました。「$input」の作業をワーカーに分担し、進捗を管理します。"
            ;;
        "worker")
            echo "ワーカーとして承知しました。「$input」の作業を実行し、完了次第ボスに報告します。"
            ;;
        *)
            echo "役割が不明です。適切な指示をお願いします。"
            ;;
    esac
}

# ヘルプ表示
show_help() {
    echo "🤖 AI組織管理システム v2.0"
    echo "=========================="
    echo ""
    echo "使用方法:"
    echo "  ./ai-agents/manage.sh [コマンド]"
    echo ""
    echo "🚀 推奨コマンド:"
    echo "  quick-start         4画面AI組織システム起動（全自動）"
    echo "  attach-multiagent   4ワーカー自動起動＋アタッチ（参照リポジトリ準拠）"
    echo "  attach-president    PRESIDENT自動起動＋アタッチ"
    echo ""
    echo "基本コマンド:"
    echo "  start               tmuxセッション作成"
    echo "  clean               セッション削除"
    echo "  claude-setup        Claude Code一括起動"
    echo "  status              システム状況確認"
    echo ""
    echo "🔥 参照リポジトリ準拠の使用法:"
    echo "  1. ./ai-agents/manage.sh quick-start        # セッション作成"
    echo "  2. ./ai-agents/manage.sh attach-multiagent  # 4ワーカー自動起動"
    echo "  3. ./ai-agents/manage.sh attach-president   # PRESIDENT自動起動"
    echo "  または:"
    echo "  tmux attach-session -t multiagent           # 手動アタッチ"
    echo "  tmux attach-session -t president            # 手動アタッチ"
    echo ""
}

# 状況表示
show_status() {
    echo "🤖 AI組織システム状況"
    echo "======================"
    echo ""
    
    # ディレクトリ確認
    echo "📁 ディレクトリ状況:"
    for dir in "$LOGS_DIR" "$SESSIONS_DIR" "$INSTRUCTIONS_DIR"; do
        if [ -d "$dir" ]; then
            echo "  ✅ $dir"
        else
            echo "  ❌ $dir (未作成)"
        fi
    done
    echo ""
    
    # 指示書確認
    echo "📋 指示書状況:"
    for role in president boss worker; do
        local file="$INSTRUCTIONS_DIR/${role}.md"
        if [ -f "$file" ]; then
            echo "  ✅ $role ($file)"
        else
            echo "  ❌ $role ($file 未作成)"
        fi
    done
    echo ""
    
    # アクティブセッション確認
    echo "💬 アクティブセッション:"
    if [ -d "$SESSIONS_DIR" ] && [ "$(ls -A $SESSIONS_DIR 2>/dev/null)" ]; then
        ls -la "$SESSIONS_DIR"/*.json 2>/dev/null | sed 's/^/  /' || echo "  なし"
    else
        echo "  なし"
    fi
    echo ""
    
    # ログファイル確認
    echo "📊 ログファイル:"
    if [ -d "$LOGS_DIR" ] && [ "$(ls -A $LOGS_DIR 2>/dev/null)" ]; then
        ls -la "$LOGS_DIR"/*.log 2>/dev/null | sed 's/^/  /' || echo "  なし"
    else
        echo "  なし"
    fi
}

# 4画面起動システム（Cursor内ターミナル + tmux対応）
launch_four_screens() {
    log_info "🚀 4画面AI組織システムを起動中..."
    
    # tmuxが利用可能かチェック
    if command -v tmux &> /dev/null; then
        launch_tmux_sessions
    else
        launch_cursor_terminals
    fi
}

# tmux環境での起動（推奨）
launch_tmux_sessions() {
    log_info "📊 tmux環境でAI組織システムを起動中..."
    
    # 既存セッションの削除
    tmux kill-session -t president 2>/dev/null || true
    tmux kill-session -t multiagent 2>/dev/null || true
    
    # PRESIDENTセッション作成（永続化）
    tmux new-session -d -s president -c "$(pwd)"
    tmux send-keys -t president "echo '🎯 PRESIDENT セッション - 対話開始準備完了'" C-m
    tmux send-keys -t president "echo 'プレジデントモード開始: ./ai-agents/manage.sh president'" C-m
    
    # multiagentセッション作成（4ペイン）
    tmux new-session -d -s multiagent -c "$(pwd)"
    tmux send-keys -t multiagent "echo '👔 BOSS1 ペイン - 対話開始準備完了'" C-m
    tmux send-keys -t multiagent "echo 'ボスモード開始: ./ai-agents/manage.sh boss'" C-m
    
    # 追加ペイン作成
    tmux split-window -t multiagent -h -c "$(pwd)"
    tmux send-keys -t multiagent:0.1 "echo '👷 WORKER1 ペイン - 対話開始準備完了'" C-m
    tmux send-keys -t multiagent:0.1 "echo 'ワーカーモード開始: ./ai-agents/manage.sh worker'" C-m
    
    tmux split-window -t multiagent:0.1 -v -c "$(pwd)"
    tmux send-keys -t multiagent:0.2 "echo '👷 WORKER2 ペイン - 対話開始準備完了'" C-m
    tmux send-keys -t multiagent:0.2 "echo 'ワーカーモード開始: ./ai-agents/manage.sh worker'" C-m
    
    tmux select-pane -t multiagent:0.0
    tmux split-window -t multiagent:0.0 -v -c "$(pwd)"
    tmux send-keys -t multiagent:0.1 "echo '👷 WORKER3 ペイン - 対話開始準備完了'" C-m
    tmux send-keys -t multiagent:0.1 "echo 'ワーカーモード開始: ./ai-agents/manage.sh worker'" C-m
    
    # レイアウト調整
    tmux select-layout -t multiagent tiled
    
    log_success "✅ AI組織システムのtmuxセッションを作成しました"
    echo ""
    echo "📋 【日本語対応】AI組織システム状況確認:"
    echo "  tmux attach-session -t president    # 👑 PRESIDENT画面（統括AI）"
    echo "  tmux attach-session -t multiagent   # 👥 4画面表示（BOSS+WORKER）"
    echo ""
    echo "🚀 【簡単3ステップ】AI組織システム起動方法:"
    echo "  1️⃣ ./ai-agents/manage.sh auto           # ワンコマンド起動"
    echo "  2️⃣ PRESIDENT画面でプロジェクト指示      # AIに日本語で指示"
    echo "  3️⃣ tmux attach-session -t multiagent   # 4画面でAI活動監視"
    echo ""
    echo "🎯 【Claude Code状態】全てのAIが日本語対応で起動準備完了"
}

# Cursor内ターミナルでの起動
launch_cursor_terminals() {
    log_info "💻 Cursor内ターミナルでAI組織システムを起動中..."
    
    # macOSの場合
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Cursorアプリケーション向けのターミナル起動
        osascript << EOF
tell application "Cursor"
    activate
end tell

tell application "System Events"
    tell process "Cursor"
        -- 新しいターミナルを開く（Cmd+Shift+\`）
        keystroke "\`" using {command down, shift down}
        delay 0.5
        
        -- PRESIDENT起動
        keystroke "echo '🎯 PRESIDENT画面' && ./ai-agents/manage.sh president"
        key code 36
        
        delay 1
        
        -- 新しいターミナル（BOSS）
        keystroke "\`" using {command down, shift down}
        delay 0.5
        keystroke "echo '👔 BOSS画面' && ./ai-agents/manage.sh boss"
        key code 36
        
        delay 1
        
        -- 新しいターミナル（WORKER1）
        keystroke "\`" using {command down, shift down}
        delay 0.5
        keystroke "echo '👷 WORKER1画面' && ./ai-agents/manage.sh worker"
        key code 36
        
        delay 1
        
        -- 新しいターミナル（WORKER2）
        keystroke "\`" using {command down, shift down}
        delay 0.5
        keystroke "echo '👷 WORKER2画面' && ./ai-agents/manage.sh worker"
        key code 36
    end tell
end tell
EOF
        log_success "✅ Cursor内ターミナルを起動しました"
        
    # Linuxの場合
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # gnome-terminalまたはxtermを使用
        if command -v gnome-terminal &> /dev/null; then
            gnome-terminal --tab --title="PRESIDENT" -- bash -c "cd $(pwd) && echo '🎯 PRESIDENT画面' && ./ai-agents/manage.sh president; exec bash" &
            gnome-terminal --tab --title="BOSS" -- bash -c "cd $(pwd) && echo '👔 BOSS画面' && ./ai-agents/manage.sh boss; exec bash" &
            gnome-terminal --tab --title="WORKER1" -- bash -c "cd $(pwd) && echo '👷 WORKER1画面' && ./ai-agents/manage.sh worker; exec bash" &
            gnome-terminal --tab --title="WORKER2" -- bash -c "cd $(pwd) && echo '👷 WORKER2画面' && ./ai-agents/manage.sh worker; exec bash" &
            log_success "✅ 4画面を起動しました（Linux gnome-terminal）"
        elif command -v xterm &> /dev/null; then
            xterm -T "PRESIDENT" -e "cd $(pwd) && echo '🎯 PRESIDENT画面' && ./ai-agents/manage.sh president" &
            xterm -T "BOSS" -e "cd $(pwd) && echo '👔 BOSS画面' && ./ai-agents/manage.sh boss" &
            xterm -T "WORKER1" -e "cd $(pwd) && echo '👷 WORKER1画面' && ./ai-agents/manage.sh worker" &
            xterm -T "WORKER2" -e "cd $(pwd) && echo '👷 WORKER2画面' && ./ai-agents/manage.sh worker" &
            log_success "✅ 4画面を起動しました（Linux xterm）"
        else
            log_error "❌ 対応するターミナルエミュレータが見つかりません"
            return 1
        fi
    else
        log_warn "⚠️  このOSでは自動4画面起動をサポートしていません"
        echo "手動で以下のコマンドを4つの別ターミナルで実行してください："
        echo "  ./ai-agents/manage.sh president"
        echo "  ./ai-agents/manage.sh boss"
        echo "  ./ai-agents/manage.sh worker"
        echo "  ./ai-agents/manage.sh worker"
    fi
}

# システム状況確認
system_status() {
    echo "🤖 AI組織システム状況"
    echo "======================"
    echo ""
    
    # ディレクトリ確認
    echo "📁 ディレクトリ状況:"
    for dir in "$LOGS_DIR" "$SESSIONS_DIR" "$INSTRUCTIONS_DIR"; do
        if [ -d "$dir" ]; then
            echo "  ✅ $dir"
        else
            echo "  ❌ $dir (未作成)"
        fi
    done
    echo ""
    
    # 指示書確認
    echo "📋 指示書状況:"
    for role in president boss worker; do
        local file="$INSTRUCTIONS_DIR/${role}.md"
        if [ -f "$file" ]; then
            echo "  ✅ $role ($file)"
        else
            echo "  ❌ $role ($file 未作成)"
        fi
    done
    echo ""
    
    # アクティブセッション確認
    echo "💬 アクティブセッション:"
    if [ -d "$SESSIONS_DIR" ] && [ "$(ls -A $SESSIONS_DIR 2>/dev/null)" ]; then
        ls -la "$SESSIONS_DIR"/*.json 2>/dev/null | sed 's/^/  /' || echo "  なし"
    else
        echo "  なし"
    fi
    echo ""
    
    # ログファイル確認
    echo "📊 ログファイル:"
    if [ -d "$LOGS_DIR" ] && [ "$(ls -A $LOGS_DIR 2>/dev/null)" ]; then
        ls -la "$LOGS_DIR"/*.log 2>/dev/null | sed 's/^/  /' || echo "  なし"
    else
        echo "  なし"
    fi
}

# Claude Code一括起動
setup_claude_code() {
    log_info "🚀 Claude Code一括起動システム..."
    
    # agent-send.shを使用
    if [ -f "./ai-agents/agent-send.sh" ]; then
        chmod +x "./ai-agents/agent-send.sh"
        "./ai-agents/agent-send.sh" --claude-setup
    else
        log_error "❌ agent-send.shが見つかりません"
        return 1
    fi
}

# デモ実行
run_demo() {
    log_info "🎬 Hello World デモ実行..."
    
    # agent-send.shを使用
    if [ -f "./ai-agents/agent-send.sh" ]; then
        chmod +x "./ai-agents/agent-send.sh"
        "./ai-agents/agent-send.sh" --demo
    else
        log_error "❌ agent-send.shが見つかりません"
        return 1
    fi
}

# 簡単4画面起動（ユーザー要求対応）
quick_start() {
    log_info "🚀 簡単4画面AI組織システム起動中..."
    
    # 既存セッションの削除
    tmux kill-session -t president 2>/dev/null || true
    tmux kill-session -t multiagent 2>/dev/null || true
    
    # PRESIDENTセッション（Claude Code軽量起動）
    tmux new-session -d -s president -c "$(pwd)"
    tmux send-keys -t president "clear" C-m
    tmux send-keys -t president "echo '🎯 PRESIDENT セッション - 軽量起動中...'" C-m
    tmux send-keys -t president "claude --dangerously-skip-permissions" C-m
    
    # multiagentセッション（4ペイン軽量起動）
    tmux new-session -d -s multiagent -c "$(pwd)"
    
    # BOSS1ペイン
    tmux send-keys -t multiagent "clear" C-m
    tmux send-keys -t multiagent "echo '👔 BOSS1 ペイン - 軽量起動中...'" C-m
    tmux send-keys -t multiagent "claude --dangerously-skip-permissions" C-m
    
    # WORKER1ペイン
    tmux split-window -t multiagent -h -c "$(pwd)"
    tmux send-keys -t multiagent:0.1 "clear" C-m
    tmux send-keys -t multiagent:0.1 "echo '👷 WORKER1 ペイン - 軽量起動中...'" C-m
    tmux send-keys -t multiagent:0.1 "claude --dangerously-skip-permissions" C-m
    
    # WORKER2ペイン
    tmux split-window -t multiagent:0.1 -v -c "$(pwd)"
    tmux send-keys -t multiagent:0.2 "clear" C-m
    tmux send-keys -t multiagent:0.2 "echo '👷 WORKER2 ペイン - 軽量起動中...'" C-m
    tmux send-keys -t multiagent:0.2 "claude --dangerously-skip-permissions" C-m
    
    # WORKER3ペイン
    tmux select-pane -t multiagent:0.0
    tmux split-window -t multiagent:0.0 -v -c "$(pwd)"
    tmux send-keys -t multiagent:0.1 "clear" C-m
    tmux send-keys -t multiagent:0.1 "echo '👷 WORKER3 ペイン - 軽量起動中...'" C-m
    tmux send-keys -t multiagent:0.1 "claude --dangerously-skip-permissions" C-m
    
    # レイアウト最適化
    tmux select-layout -t multiagent tiled
    
    # バックグラウンドで軽量監視システム起動（15秒間隔）
    (
        # PRESIDENT高速起動検知（2秒間隔でチェック）
        while ! tmux capture-pane -t president -p 2>/dev/null | grep -q "Welcome to Claude Code\|cwd:"; do
            sleep 2
        done
        
        # PRESIDENT軽量メッセージ送信（「>」付きで自動実行対応 + ワーカー指示ルール追加）
        tmux send-keys -t president ">あなたはプレジデントです。./ai-agents/instructions/president.mdの指示書を参照して実行してください。【重要】ワーカーに指示を送る時は必ず文頭に「>」を付けてください（例：>タスクを実行してください）。さらに以下のコマンドで四人のワーカーを起動してください。" C-m
        sleep 3
        tmux send-keys -t president ">for i in {0..3}; do tmux send-keys -t multiagent:0.\$i 'claude --dangerously-skip-permissions ' C-m; done" C-m
        
        # 各ワーカーの高速起動検知（2秒間隔で並列チェック）
        for i in {0..3}; do
            (
                while ! tmux capture-pane -t multiagent:0.$i -p 2>/dev/null | grep -q "Welcome to Claude Code\|cwd:"; do
                    sleep 2
                done
                
                # 各ワーカー軽量役割設定（「>」付きで自動実行対応）
                case $i in
                    0) tmux send-keys -t multiagent:0.0 ">あなたはBOSS1です。./ai-agents/instructions/boss.mdの指示書を参照して、チームリーダーとして行動してください。日本語で応答してください。" C-m ;;
                    1) tmux send-keys -t multiagent:0.1 ">あなたはWORKER1です。./ai-agents/instructions/worker.mdの指示書を参照して、実行担当として行動してください。日本語で応答してください。" C-m ;;
                    2) tmux send-keys -t multiagent:0.2 ">あなたはWORKER2です。./ai-agents/instructions/worker.mdの指示書を参照して、実行担当として行動してください。日本語で応答してください。" C-m ;;
                    3) tmux send-keys -t multiagent:0.3 ">あなたはWORKER3です。./ai-agents/instructions/worker.mdの指示書を参照して、実行担当として行動してください。日本語で応答してください。" C-m ;;
                esac
            ) &
        done
        
        # 完了待ち
        wait
        echo "⚡ 全AI高速自動メッセージ送信完了 ($(date))" > /tmp/ai-agents-auto-setup.log
    ) &
    
    log_success "✅ 4画面AI組織システム起動完了"
    echo ""
    echo "🎯 次の手順で使用開始:"
    echo ""
    echo "【ターミナル1】プレジデント画面:"
    echo "  tmux attach-session -t president"
    echo ""
    echo "【ターミナル2】ワーカー4画面:"
    echo "  tmux attach-session -t multiagent"
    echo ""
    echo "💡 使用方法:"
    echo "  1. ターミナル1（president）で指示開始:"
    echo "     'あなたはpresidentです。指示書に従って'"
    echo ""
    echo "  2. ターミナル2（multiagent）で各AIの作業確認"
    echo ""
    echo "  3. 実際のClaude Code AIが階層組織で動作"
    echo ""
    echo "🔧 システム確認:"
    echo "  tmux list-sessions  # セッション一覧確認"
}

# multiagentセッション自動起動アタッチ（参照リポジトリ対応）
attach_multiagent() {
    log_info "🚀 multiagentセッション自動起動アタッチ中..."
    
    # セッション存在確認
    if ! tmux has-session -t multiagent 2>/dev/null; then
        log_error "❌ multiagentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh start"
        return 1
    fi
    
    # Cursor内で新しいターミナルを開く（macOS対応）
    log_info "🖥️ Cursor内で新ターミナル起動中..."
    
    # 新しいターミナルタブを開く
    if command -v osascript &> /dev/null; then
        # macOSの場合：Cmd+Shift+T で新しいターミナル
        osascript -e 'tell application "System Events" to keystroke "t" using {command down, shift down}' &
        sleep 2
    fi
    
    # 4つのペインでClaude Code自動起動（参照リポジトリ準拠）
    log_info "🤖 4ワーカー自動起動中..."
    
    # ペイン0.0: boss1
    tmux send-keys -t multiagent:0.0 "echo '👔 BOSS1 - Claude Code起動中...'" C-m
    tmux send-keys -t multiagent:0.0 "printf '2\\n' | claude --dangerously-skip-permissions < /dev/null" C-m
    
    # ペイン0.1: worker1  
    tmux send-keys -t multiagent:0.1 "echo '👷 WORKER1 - Claude Code起動中...'" C-m
    tmux send-keys -t multiagent:0.1 "printf '2\\n' | claude --dangerously-skip-permissions < /dev/null" C-m
    
    # ペイン0.2: worker2
    tmux send-keys -t multiagent:0.2 "echo '👷 WORKER2 - Claude Code起動中...'" C-m
    tmux send-keys -t multiagent:0.2 "printf '2\\n' | claude --dangerously-skip-permissions < /dev/null" C-m
    
    # ペイン0.3: worker3
    tmux send-keys -t multiagent:0.3 "echo '👷 WORKER3 - Claude Code起動中...'" C-m
    tmux send-keys -t multiagent:0.3 "printf '2\\n' | claude --dangerously-skip-permissions < /dev/null" C-m
    
    sleep 1
    log_success "✅ 4ワーカー自動起動完了"
    
    # セッションにアタッチ
    tmux attach-session -t multiagent
}

# presidentセッション自動起動アタッチ
attach_president() {
    log_info "🎯 presidentセッション自動起動アタッチ中..."
    
    # セッション存在確認
    if ! tmux has-session -t president 2>/dev/null; then
        log_error "❌ presidentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh quick-start"
        return 1
    fi
    
    # Claude Code自動起動
    tmux send-keys -t president "echo '🎯 PRESIDENT - Claude Code起動中...'" C-m
    tmux send-keys -t president "claude --dangerously-skip-permissions" C-m
    
    # 自動起動完了を待つ
    sleep 3
    
    # デフォルトメッセージを自動送信（前の入力をクリア、「>」付きで自動実行対応 + ワーカー指示ルール追加）
    tmux send-keys -t president C-c  # 前の入力をクリア
    sleep 0.1
    tmux send-keys -t president ">あなたはプレジデントです。./ai-agents/instructions/president.mdの指示書を参照して実行してください。【重要】ワーカーに指示を送る時は必ず文頭に「>」を付けてください（例：>タスクを実行してください）。さらにワーカーたちを立ち上げてボスに指令を伝達して下さい。" C-m
    sleep 1
    tmux send-keys -t president ">for i in {0..3}; do tmux send-keys -t multiagent:0.\$i 'claude --dangerously-skip-permissions ' C-m; done" C-m
    
    log_success "✅ PRESIDENT自動起動完了（デフォルトメッセージ送信済み）"
    
    # セッションにアタッチ
    tmux attach-session -t president
}

# セッション削除関数
clean_sessions() {
    log_info "🧹 AI組織システムセッション削除中..."
    
    # 既存セッションの削除
    tmux kill-session -t president 2>/dev/null || true
    tmux kill-session -t multiagent 2>/dev/null || true
    
    log_success "✅ 全セッション削除完了"
    
    # セッション確認
    echo ""
    echo "📊 現在のtmuxセッション:"
    tmux list-sessions 2>/dev/null || echo "  セッションなし"
}

# claude-auth関数（連携タイミング完全見直し版）
claude_auth_function() {
    log_info "🚀 Claude Auth - 連携タイミング完全見直し版起動中..."
    
    # 既存セッション削除
    tmux kill-session -t president 2>/dev/null || true
    tmux kill-session -t multiagent 2>/dev/null || true
    
    # 段階1: PRESIDENTセッション作成
    log_info "📋 【段階1/6】PRESIDENTセッション作成中..."
    tmux new-session -d -s president -c "$(pwd)"
    tmux send-keys -t president "clear" C-m
    tmux send-keys -t president "echo '🎯 PRESIDENT セッション - 連携タイミング完全見直し版'" C-m
    log_success "✅ PRESIDENTセッション作成完了"
    
    # 段階2: multiagentセッション作成（4画面）
    log_info "📋 【段階2/6】multiagentセッション作成中..."
    tmux new-session -d -s multiagent -c "$(pwd)"
    tmux split-window -h -t multiagent
    tmux split-window -v -t multiagent:0.0
    tmux split-window -v -t multiagent:0.1
    tmux select-layout -t multiagent tiled
    
    # 各ペインの準備
    for i in {0..3}; do
        tmux send-keys -t multiagent:0.$i "clear" C-m
        case $i in
            0) tmux send-keys -t multiagent:0.0 "echo '👔 BOSS - 連携待機中...'" C-m ;;
            1) tmux send-keys -t multiagent:0.1 "echo '👷 WORKER1 - 連携待機中...'" C-m ;;
            2) tmux send-keys -t multiagent:0.2 "echo '👷 WORKER2 - 連携待機中...'" C-m ;;
            3) tmux send-keys -t multiagent:0.3 "echo '👷 WORKER3 - 連携待機中...'" C-m ;;
        esac
    done
    log_success "✅ multiagentセッション作成完了"
    
    # 段階3: PRESIDENT Claude Code起動・確実確認
    log_info "📋 【段階3/6】PRESIDENT Claude Code起動・確実確認中..."
    tmux send-keys -t president "claude --dangerously-skip-permissions" C-m
    
    # 起動完了待機（高速確認・最大60秒）
    log_info "⏳ PRESIDENT Claude Code起動完了待機中（高速確認）..."
    for i in {1..30}; do
        screen_content=$(tmux capture-pane -t president -p 2>/dev/null || echo "")
        if echo "$screen_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
            log_success "✅ PRESIDENT Claude Code起動完了 (${i}秒)"
            break
        fi
        if [ $((i % 5)) -eq 0 ]; then
            log_info "⏳ PRESIDENT起動確認中: ${i}/30秒経過"
        fi
        sleep 2
    done
    
    if [ $i -eq 30 ]; then
        log_error "❌ PRESIDENT起動タイムアウト（60秒） - 手動で確認してください"
        tmux attach-session -t president
        return 1
    fi
    
    # 段階4: PRESIDENTメッセージ送信・確実展開確認
    log_info "📋 【段階4/6】PRESIDENTメッセージ送信・確実展開確認中..."
    sleep 2  # 安定化待機
    
    # 段階的メッセージ送信（確実展開のため分割）
    log_info "📤 基本指示メッセージ送信中..."
    tmux send-keys -t president "あなたはプレジデントです。./ai-agents/instructions/president.mdの指示書を参照して実行してください。" C-m
    sleep 3  # メッセージ処理待機
    
    log_info "📤 ワーカー指示ルールメッセージ送信中..."
    tmux send-keys -t president "【重要】ワーカーに指示を送る時は必ず文頭に「>」を付けてください（例：>タスクを実行してください）" C-m
    sleep 3  # メッセージ処理待機
    
    log_info "📤 ワーカー起動指示メッセージ送信中..."
    tmux send-keys -t president "まず最初に、必ず以下のコマンドを実行してワーカーたちを起動してください：" C-m
    sleep 2
    tmux send-keys -t president "for i in {0..3}; do tmux send-keys -t multiagent:0.\$i 'claude --dangerously-skip-permissions' C-m; done" C-m
    
    # PRESIDENTのメッセージ処理完了確認
    log_info "🔍 PRESIDENTメッセージ処理完了確認中..."
    for j in {1..20}; do
        president_content=$(tmux capture-pane -t president -p 2>/dev/null | tail -3)
        if echo "$president_content" | grep -qE "(Please let me know|How can I help|何かお手伝い)" 2>/dev/null; then
            log_success "✅ PRESIDENTメッセージ処理完了確認 (${j}/20秒)"
            break
        fi
        sleep 1
    done
    
    log_success "✅ PRESIDENTメッセージ送信・展開完了"
    
    # 段階5: ワーカー起動・受信確認
    log_info "📋 【段階5/6】ワーカー起動・受信確認中..."
    sleep 3  # PRESIDENTの処理待機
    
    # ワーカー確実起動（直接実行）
    for i in {0..3}; do
        log_info "🚀 WORKER${i} 起動・受信確認中..."
        tmux send-keys -t multiagent:0.$i "claude --dangerously-skip-permissions" C-m
        
        # 個別起動確認（軽量監視）
        for k in {1..2}; do
            worker_content=$(tmux capture-pane -t multiagent:0.$i -p 2>/dev/null || echo "")
            if echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                log_success "✅ WORKER${i} 起動完了 (${k}回目チェック)"
                
                # 役割メッセージ送信・受信確認
                case $i in
                    0) role_msg="あなたはBOSS・チームリーダーです。./ai-agents/instructions/boss.md を参照して日本語で応答してください。" ;;
                    1) role_msg="あなたはWORKER1・フロントエンドエンジニアです。./ai-agents/instructions/worker.md を参照して日本語で応答してください。" ;;
                    2) role_msg="あなたはWORKER2・バックエンドエンジニアです。./ai-agents/instructions/worker.md を参照して日本語で応答してください。" ;;
                    3) role_msg="あなたはWORKER3・UI/UXデザイナーです。./ai-agents/instructions/worker.md を参照して日本語で応答してください。" ;;
                esac
                
                sleep 2  # 安定化待機
                tmux send-keys -t multiagent:0.$i "$role_msg" C-m
                
                # 役割メッセージ受信確認
                sleep 3
                worker_response=$(tmux capture-pane -t multiagent:0.$i -p 2>/dev/null | tail -3)
                if echo "$worker_response" | grep -qE "(Please let me know|How can I help|承知|理解)" 2>/dev/null; then
                    log_success "✅ WORKER${i} 役割メッセージ受信・処理完了"
                else
                    log_warn "⚠️ WORKER${i} 役割メッセージ受信未確認"
                fi
                break
            fi
            sleep 15
        done
        
        if [ $k -eq 2 ]; then
            log_error "❌ WORKER${i} 起動タイムアウト（軽量監視2回）"
        fi
    done
    
    log_success "✅ 全ワーカー起動・受信確認完了"
    
    # 段階6: 連携確認・UI設定
    log_info "📋 【段階6/6】連携確認・UI設定中..."
    
    # UI改善設定
    tmux set-option -g mouse on
    tmux set-option -g pane-border-status top
    tmux set-option -g pane-border-format '#[fg=colour15,bg=colour4,bold]#{?pane_active, 🎯 ACTIVE ,}#[fg=colour7,bg=colour8]#{?pane_active,, STANDBY } #[fg=colour15,bold]#{pane_title}#[default]'
    
    # ペインタイトル設定（連携状況表示）
    tmux select-pane -t president:0 -T "👑 PRESIDENT・統括責任者 [✅ 連携完了]"
    tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [✅ 連携完了]"
    tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [✅ 連携完了]"
    tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [✅ 連携完了]"
    tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [✅ 連携完了]"
    
    # 完全自動実行監視システム起動
    log_info "🚀 連携確認済み自動実行監視システム起動中..."
    start_perfect_auto_execute_monitor &
    
    log_success "🎉 Claude Auth連携タイミング完全見直し版システム起動完了！"
    echo ""
    echo "🎯 連携確認完了:"
    echo "  ✅ PRESIDENT: 起動・メッセージ展開・処理完了"
    echo "  ✅ 全WORKER: 起動・受信・役割設定完了"
    echo "  ✅ 自動実行監視: 起動済み"
    echo ""
    echo "📋 使用方法:"
    echo "  - presidentセッション: tmux attach-session -t president"
    echo "  - multiagentセッション: tmux attach-session -t multiagent"
    echo ""
    
    # PRESIDENT画面に自動接続
    log_info "👑 PRESIDENT画面に自動接続中..."
    tmux attach-session -t president
}

# 📱 動的ステータス更新機能
setup_dynamic_status_updates() {
    nohup bash -c '
        exec > /tmp/ai-agents-status-updates.log 2>&1
        echo "$(date): 動的ステータス更新機能開始"
        
        while true; do
            # 🔍 各ペインの活動状況を監視
            active_count=0
            
            # PRESIDENT状況チェック
            if tmux capture-pane -t president -p 2>/dev/null | grep -qE "Please let me know|How can I help|What would you like" 2>/dev/null; then
                tmux select-pane -t president:0 -T "👑 PRESIDENT・最高責任者 [プロジェクト統括・意思決定] 🟢 STATUS: アクティブ対話中"
                ((active_count++))
            fi
            
            # 各ワーカーの状況チェック
            for worker_id in {0..3}; do
                worker_content=$(tmux capture-pane -t multiagent:0.$worker_id -p 2>/dev/null || echo "")
                
                case $worker_id in
                    0) # BOSS
                        if echo "$worker_content" | grep -qE "Please let me know|How can I help|分析|レポート" 2>/dev/null; then
                            tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [作業分担・進捗管理] 🟢 STATUS: チーム指導中"
                            ((active_count++))
                        else
                            tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [作業分担・進捗管理] 🟡 STATUS: 指示待機中"
                        fi
                        ;;
                    1) # WORKER1 - フロントエンド
                        if echo "$worker_content" | grep -qE "Please let me know|React|Vue|CSS|HTML" 2>/dev/null; then
                            tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [React/Vue/CSS] 🟢 STATUS: UI実装中"
                            ((active_count++))
                        else
                            tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [React/Vue/CSS] 🟡 STATUS: 実装待機中"
                        fi
                        ;;
                    2) # WORKER2 - バックエンド
                        if echo "$worker_content" | grep -qE "Please let me know|API|Node|Python|データベース" 2>/dev/null; then
                            tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [API/DB/サーバー] 🟢 STATUS: 開発中"
                            ((active_count++))
                        else
                            tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [API/DB/サーバー] 🟡 STATUS: 開発待機中"
                        fi
                        ;;
                    3) # WORKER3 - デザイン
                        if echo "$worker_content" | grep -qE "Please let me know|デザイン|UI|UX|視覚" 2>/dev/null; then
                            tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [UX/UI設計・視覚改善] 🟢 STATUS: 設計中"
                            ((active_count++))
                        else
                            tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [UX/UI設計・視覚改善] 🟡 STATUS: 設計待機中"
                        fi
                        ;;
                esac
            done
            
            # ウィンドウタイトル更新（アクティブ数表示）
            tmux rename-window -t president "👑 PRESIDENT [活動状況: $active_count/5]"
            tmux rename-window -t multiagent "👥 AI-TEAM [稼働メンバー: $active_count/5]"
            
            # ステータスライン更新
            current_time=$(date "+%H:%M:%S")
            if [ $active_count -gt 0 ]; then
                tmux set-option -g status-left "#[bg=colour2,fg=colour15,bold] 🤖 AI組織システム - $active_count メンバー稼働中 #[default]"
            else
                tmux set-option -g status-left "#[bg=colour3,fg=colour15,bold] 🤖 AI組織システム - 全メンバー待機中 #[default]"
            fi
            
            echo "$(date): ステータス更新完了 - アクティブ: $active_count/5"
            
            # 15秒間隔で更新（軽量化）
            sleep 15
        done
    ' &
}

# 初期化関数
init_dirs() {
    # 必要なディレクトリを作成
    mkdir -p "$LOGS_DIR" "$SESSIONS_DIR" "$INSTRUCTIONS_DIR" "$TMP_DIR"
    
    # ログディレクトリ内のサブディレクトリ作成
    mkdir -p "$LOGS_DIR/ai-agents" "$LOGS_DIR/system"
}

# 半自動PRESIDENT起動（ユーザー要求対応）
setup_claude_semi_auto() {
    log_info "🎯 PRESIDENT半自動起動（tmux作成→認証手動・メッセージ自動セット）"
    
    # Step1: tmuxセッション自動作成
    log_info "📋 【Step1】tmuxセッション自動作成中..."
    launch_tmux_sessions
    sleep 1
    log_success "✅ tmuxセッション自動作成完了"
    
    echo ""
    log_info "📋 【Step2】PRESIDENT起動 - 選択肢半自動進行"
    log_info "🎯 Claude Code起動中...（認証は手動で行ってください）"
    tmux send-keys -t president 'claude --dangerously-skip-permissions' C-m
    
    # テーマ選択自動化（3秒後にデフォルト選択）
    sleep 3
    log_info "🎨 テーマ選択自動化中..."
    tmux send-keys -t president C-m  # デフォルト選択（Dark mode）
    
    # 認証方法選択自動化（3秒後にClaude account選択）
    sleep 3
    log_info "🔐 認証方法選択自動化中..."
    tmux send-keys -t president C-m  # Claude account with subscription選択
    
    # API Key競合選択自動化（3秒後にNo選択）
    sleep 3
    log_info "🔑 API Key競合選択自動化中..."
    tmux send-keys -t president C-m  # No (recommended)選択
    
    # セキュリティ確認自動化（3秒後にEnter）
    sleep 3
    log_info "🛡️ セキュリティ確認自動化中..."
    tmux send-keys -t president C-m  # Press Enter to continue
    
    # ターミナル設定自動化（3秒後にYes選択）
    sleep 3
    log_info "💻 ターミナル設定自動化中..."
    tmux send-keys -t president C-m  # Yes, use recommended settings
    
    # Bypass Permissions確認自動化（3秒後に下矢印→Enter）
    sleep 3
    log_info "⚠️ Bypass Permissions確認自動化中..."
    tmux send-keys -t president Down C-m  # Yes, I accept選択
    
    # バックグラウンドでClaude Code起動を監視し、メッセージを自動セット
    run_semi_auto_background &
    
    echo ""
    echo "📋 【動作仕様】半自動システム:"
    echo "  1️⃣ プレジデント起動: 選択肢半自動進行"
    echo "  2️⃣ 認証: 手動（ユーザーが行う）"
    echo "  3️⃣ Claude Code立ち上がり時: メッセージ自動セット"
    echo "  4️⃣ 送信: 手動（Enterキー）"
    echo "  5️⃣ ワーカー起動後: 各ワーカーにメッセージ自動セット"
    echo "  6️⃣ 4画面確認: ターミナル2で手動実行"
    echo ""
    echo "🔹 【次のステップ】:"
    echo "  - Claude Code認証完了後、PRESIDENTメッセージが自動セットされます"
    echo "  - Enterキーで送信してください（手動）"
    echo "  - ワーカー起動後、各ワーカーにメッセージが自動セットされます"
    echo "  - 別ターミナルで: tmux attach-session -t multiagent"
    echo ""
    
    # PRESIDENT画面にアタッチ
    log_info "👑 PRESIDENT画面に接続中...（認証は手動で行ってください）"
    tmux attach-session -t president
}

# 手動4画面起動（バックアップ用）
manual_multiagent_start() {
    log_info "🔧 手動4画面起動（バックアップ用）"
    
    # セッション存在確認
    if ! tmux has-session -t multiagent 2>/dev/null; then
        log_error "❌ multiagentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh start"
        return 1
    fi
    
    log_info "👥 手動4画面起動中..."
    
    # 権限スキップで起動
    for i in {0..3}; do 
        tmux send-keys -t multiagent:0.$i 'printf "2\\n" | claude --dangerously-skip-permissions < /dev/null' C-m
        sleep 0.5
    done
    
    log_success "✅ 手動4画面起動完了"
    echo ""
}

# 🚀 ワーカー強制起動機能（確実性重視）
force_start_workers() {
    log_info "🚀 ワーカー強制起動機能（確実性重視）"
    
    # セッション存在確認
    if ! tmux has-session -t multiagent 2>/dev/null; then
        log_error "❌ multiagentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh start"
        return 1
    fi
    
    log_info "🔄 各ワーカーの起動状況を確認中..."
    
    # 各ワーカーの状況確認と強制起動
    for i in {0..3}; do
        log_info "📋 WORKER${i} 状況確認中..."
        
        # 現在の状況を取得
        worker_content=$(tmux capture-pane -t multiagent:0.$i -p 2>/dev/null || echo "")
        
        if echo "$worker_content" | grep -q "Welcome to Claude Code\|Please let me know" 2>/dev/null; then
            log_success "✅ WORKER${i} 既に起動済み"
        else
            log_warn "⚠️ WORKER${i} 未起動 - 強制起動実行中..."
            
            # 強制起動（複数手法で確実性向上）
            tmux send-keys -t multiagent:0.$i C-c  # 現在の処理をクリア
            sleep 0.5
            tmux send-keys -t multiagent:0.$i "claude --dangerously-skip-permissions" C-m
            sleep 2
            
            # Bypass Permissions自動選択
            tmux send-keys -t multiagent:0.$i "2" C-m
            sleep 1
            
            log_info "⏳ WORKER${i} 起動完了待機中..."
            
            # 起動完了確認（最大30秒）
            for j in {1..60}; do
                worker_check=$(tmux capture-pane -t multiagent:0.$i -p 2>/dev/null || echo "")
                if echo "$worker_check" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                    log_success "✅ WORKER${i} 起動完了確認 (${j}/60秒)"
                    
                    # 🔧 役割メッセージ自動送信（「2」混入問題修正、「>」付きで自動実行対応）
                    case $i in
                        0) role_msg=">あなたはBOSS・チームリーダーです。./ai-agents/instructions/boss.md を参照して日本語で応答してください。" ;;
                        1) role_msg=">あなたはWORKER1・フロントエンドエンジニアです。./ai-agents/instructions/worker.md を参照して日本語で応答してください。" ;;
                        2) role_msg=">あなたはWORKER2・バックエンドエンジニアです。./ai-agents/instructions/worker.md を参照して日本語で応答してください。" ;;
                        3) role_msg=">あなたはWORKER3・UI/UXデザイナーです。./ai-agents/instructions/worker.md を参照して日本語で応答してください。" ;;
                    esac
                    
                    # 🚫 Bypass Permissions選択の「2」が混入しないよう、十分な待機時間を確保
                    sleep 2
                    tmux send-keys -t multiagent:0.$i "$role_msg" C-m
                    log_success "✅ WORKER${i} 役割メッセージ送信完了"
                    break
                fi
                sleep 0.5
            done
            
            if [ $j -eq 60 ]; then
                log_error "❌ WORKER${i} 起動タイムアウト（30秒）"
            fi
        fi
        
        echo ""
    done
    
    log_success "🎉 ワーカー強制起動処理完了"
    echo ""
    echo "📋 確認方法:"
    echo "  tmux attach-session -t multiagent"
    echo ""
}

# 🎨 チームUI復旧機能（緊急用）
restore_team_ui() {
    log_info "🎨 チームUI復旧機能（緊急用）"
    
    # セッション存在確認
    if ! tmux has-session -t multiagent 2>/dev/null; then
        log_error "❌ multiagentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh start"
        return 1
    fi
    
    if ! tmux has-session -t president 2>/dev/null; then
        log_error "❌ presidentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh start"
        return 1
    fi
    
    log_info "🖱️ マウス機能とボーダー設定中..."
    
    # 🖱️ 強化されたtmux視覚設定（クリック移動対応）
    tmux set-option -g mouse on
    tmux set-option -g pane-border-status top
    tmux set-option -g pane-border-style "fg=colour8"
    tmux set-option -g pane-active-border-style "fg=colour4,bold"
    
    # 🎨 ユーザーフレンドリーなペインタイトルフォーマット（常時見やすく表示）
    tmux set-option -g pane-border-format '#[fg=colour15,bg=colour4,bold]#{?pane_active, 🎯 ACTIVE ,}#[fg=colour7,bg=colour8]#{?pane_active,, STANDBY } #[fg=colour15,bold]#{pane_title}#[default]'
    
    log_info "📊 日本語ステータスライン設定中..."
    
    # 📊 日本語対応ステータスライン（ユーザーフレンドリー）
    tmux set-option -g status-left-length 100
    tmux set-option -g status-right-length 100
    tmux set-option -g status-left "#[bg=colour2,fg=colour15,bold] 🤖 AI組織システム稼働中 │ 5名のエージェントが協調作業 #[default]"
    tmux set-option -g status-right "#[bg=colour4,fg=colour15] 🕐 %H:%M:%S │ 💡 ヒント: ペインをクリックで移動可能 #[default]"
    tmux set-option -g status-interval 1
    
    log_info "🏷️ ユーザーフレンドリーな役職・職種表示設定中..."
    
    # 🏷️ ユーザーフレンドリーな役職表示（常時見やすく）
    tmux select-pane -t president:0 -T "👑 統括責任者・PRESIDENT │ プロジェクト全体管理・意思決定 │ 🟢 稼働中"
    tmux select-pane -t multiagent:0.0 -T "👔 チームリーダー・BOSS │ 作業分担・進捗管理・品質確保 │ 🟡 待機中"
    tmux select-pane -t multiagent:0.1 -T "💻 フロントエンド・WORKER1 │ React・Vue・CSS・UI実装 │ 🟡 待機中"
    tmux select-pane -t multiagent:0.2 -T "🔧 バックエンド・WORKER2 │ API・DB・サーバー処理 │ 🟡 待機中"
    tmux select-pane -t multiagent:0.3 -T "🎨 UI/UXデザイナー・WORKER3 │ デザイン・ユーザビリティ改善 │ 🟡 待機中"
    
    log_info "🖥️ ウィンドウタイトル設定中..."
    
    # 🖥️ ウィンドウタイトルも設定（チーム構成表示）
    tmux rename-window -t president "👑 PRESIDENT [1/5 ACTIVE]"
    tmux rename-window -t multiagent "👥 AI-TEAM [4/5 MEMBERS]"
    
    log_success "🎉 チームUI復旧完了！"
    echo ""
    echo "📋 確認方法:"
    echo "  tmux attach-session -t multiagent  # 4画面チーム確認"
    echo "  tmux attach-session -t president   # PRESIDENT確認"
    echo ""
    echo "🎯 特徴:"
    echo "  ✅ マウスクリック移動対応"
    echo "  ✅ 詳細な役職・職種表示"
    echo "  ✅ リアルタイム時刻表示"
    echo "  ✅ カラー付きステータス表示"
    echo ""
}

# 🚀 自動実行監視機能（AI組織駆動中）
start_auto_execute_monitor() {
    log_info "🚀 自動実行監視機能開始（AI組織駆動中）"
    
    # セッション存在確認
    if ! tmux has-session -t multiagent 2>/dev/null; then
        log_error "❌ multiagentセッションが存在しません。先に起動してください:"
        echo "  ./ai-agents/manage.sh start"
        return 1
    fi
    
    log_info "🔍 ワーカーの指示監視を開始します..."
    echo "📋 監視対象:"
    echo "  👔 BOSS (multiagent:0.0)"
    echo "  💻 WORKER1 (multiagent:0.1)" 
    echo "  🔧 WORKER2 (multiagent:0.2)"
    echo "  🎨 WORKER3 (multiagent:0.3)"
    echo ""
    echo "💡 動作: Claude Codeの指示に文章が入ったら即座に自動実行（Enterキー送信）"
    echo "🛑 停止: Ctrl+C"
    echo ""
    
    # バックグラウンドで自動実行監視を開始
    nohup bash -c '
        exec > /tmp/ai-agents-auto-execute.log 2>&1
        echo "$(date): 自動実行監視開始"
        
        # 各ワーカーの前回の画面内容を保存
        declare -A prev_content
        for worker_id in {0..3}; do
            prev_content[$worker_id]=$(tmux capture-pane -t multiagent:0.$worker_id -p 2>/dev/null || echo "")
        done
        
        while true; do
            for worker_id in {0..3}; do
                # 現在の画面内容を取得
                current_content=$(tmux capture-pane -t multiagent:0.$worker_id -p 2>/dev/null || echo "")
                
                # 前回と比較して新しい指示が入力されたかチェック
                if [ "$current_content" != "${prev_content[$worker_id]}" ]; then
                    # 新しい内容をチェック
                    new_lines=$(echo "$current_content" | tail -5)
                    
                    # 複数パターンで指示検出（より確実な自動実行）
                    should_execute=false
                    
                    # パターン1: 「>」プロンプトに文字が入力されている
                    if echo "$new_lines" | grep -qE "^> .+" 2>/dev/null; then
                        should_execute=true
                        echo "$(date): WORKER${worker_id} パターン1検出: プロンプト入力"
                    fi
                    
                    # パターン2: プレジデントからの指示メッセージを検出
                    if echo "$current_content" | grep -qE "(指示を送信|プロジェクトの指示|タスクを|作業を|実行して)" 2>/dev/null; then
                        should_execute=true
                        echo "$(date): WORKER${worker_id} パターン2検出: プレジデント指示"
                    fi
                    
                    # パターン3: 入力待ち状態での新しいコンテンツ
                    if echo "$current_content" | tail -1 | grep -qE "^>" 2>/dev/null && [ ${#current_content} -gt ${#prev_content[$worker_id]} ]; then
                        should_execute=true
                        echo "$(date): WORKER${worker_id} パターン3検出: 入力待ち状態変化"
                    fi
                    
                    if [ "$should_execute" = true ]; then
                        echo "$(date): WORKER${worker_id} 新しい指示検出 - 自動実行開始"
                        
                        # ステータス更新
                        case $worker_id in
                            0) tmux select-pane -t multiagent:0.0 -T "👔 チームリーダー・BOSS │ 作業分担・進捗管理・品質確保 │ 🟢 実行中" ;;
                            1) tmux select-pane -t multiagent:0.1 -T "💻 フロントエンド・WORKER1 │ React・Vue・CSS・UI実装 │ 🟢 実行中" ;;
                            2) tmux select-pane -t multiagent:0.2 -T "🔧 バックエンド・WORKER2 │ API・DB・サーバー処理 │ 🟢 実行中" ;;
                            3) tmux select-pane -t multiagent:0.3 -T "🎨 UI/UXデザイナー・WORKER3 │ デザイン・ユーザビリティ改善 │ 🟢 実行中" ;;
                        esac
                        
                        # 確実なEnterキー送信（複数回試行）
                        echo "$(date): WORKER${worker_id} Enterキー送信開始"
                        
                        # 方法1: 通常のEnterキー送信
                        tmux send-keys -t multiagent:0.$worker_id C-m
                        sleep 0.5
                        
                        # 方法2: 確実性のため再度送信
                        tmux send-keys -t multiagent:0.$worker_id ""
                        tmux send-keys -t multiagent:0.$worker_id C-m
                        sleep 0.5
                        
                        # 方法3: 強制的な改行送信
                        tmux send-keys -t multiagent:0.$worker_id Enter
                        
                        echo "$(date): WORKER${worker_id} Enterキー送信完了"
                        
                        # 3秒後にステータスを待機中に戻す
                        sleep 3
                        case $worker_id in
                            0) tmux select-pane -t multiagent:0.0 -T "👔 チームリーダー・BOSS │ 作業分担・進捗管理・品質確保 │ 🟡 待機中" ;;
                            1) tmux select-pane -t multiagent:0.1 -T "💻 フロントエンド・WORKER1 │ React・Vue・CSS・UI実装 │ 🟡 待機中" ;;
                            2) tmux select-pane -t multiagent:0.2 -T "🔧 バックエンド・WORKER2 │ API・DB・サーバー処理 │ 🟡 待機中" ;;
                            3) tmux select-pane -t multiagent:0.3 -T "🎨 UI/UXデザイナー・WORKER3 │ デザイン・ユーザビリティ改善 │ 🟡 待機中" ;;
                        esac
                    fi
                    
                    # 前回の内容を更新
                    prev_content[$worker_id]="$current_content"
                fi
            done
            
            # 15秒間隔で軽量監視（効率的な検出）
            sleep 15
        done
    ' &
    
    AUTO_EXECUTE_PID=$!
    echo $AUTO_EXECUTE_PID > /tmp/ai-agents-auto-execute.pid
    
    log_success "✅ 自動実行監視機能が開始されました（PID: $AUTO_EXECUTE_PID）"
    echo ""
    echo "📋 監視ログ確認:"
    echo "  tail -f /tmp/ai-agents-auto-execute.log"
    echo ""
    echo "🛑 停止方法:"
    echo "  kill $AUTO_EXECUTE_PID"
    echo "  または ./ai-agents/manage.sh stop-auto-execute"
    echo ""
}

# 🛑 自動実行監視停止機能
stop_auto_execute_monitor() {
    log_info "🛑 自動実行監視停止中..."
    
    if [ -f /tmp/ai-agents-auto-execute.pid ]; then
        AUTO_EXECUTE_PID=$(cat /tmp/ai-agents-auto-execute.pid)
        if kill $AUTO_EXECUTE_PID 2>/dev/null; then
            log_success "✅ 自動実行監視を停止しました（PID: $AUTO_EXECUTE_PID）"
            rm -f /tmp/ai-agents-auto-execute.pid
        else
            log_warn "⚠️ プロセス（PID: $AUTO_EXECUTE_PID）は既に停止しています"
        fi
    else
        log_warn "⚠️ 自動実行監視は開始されていません"
    fi
    echo ""
}

# .claude設定確認・生成機能
setup_claude_local_config() {
    log_info "🔧 .claude設定の確認・生成機能"
    
    # プロジェクトルートに移動
    cd "$(dirname "$(dirname "$0")")"
    
    if [ -d ".claude" ] && [ -f ".claude/CLAUDE.md" ]; then
        log_success "✅ .claude設定は既に存在します"
        echo ""
        echo "📁 既存の.claude設定:"
        ls -la .claude/
        echo ""
        read -p ".claude設定を再生成しますか？ [y/N]: " regenerate
        
        if [[ ! $regenerate =~ ^[Yy]$ ]]; then
            log_info "設定生成をスキップしました"
            return 0
        fi
    fi
    
    log_info "🔄 .claude設定を生成中..."
    
    # .claudeディレクトリ作成
    mkdir -p .claude
    
    # Claude Code設定ファイルの生成
    cat > .claude/claude_desktop_config.json << 'EOF'
{
  "name": "AI開発支援プロジェクト",
  "description": "AI組織システム + Cursor連携開発環境",
  "rules": [
    "日本語でコミュニケーション",
    "ユーザーの要求を最優先",
    "機能を勝手に変更しない",
    "AI組織システムとの連携を保持"
  ],
  "memory": {
    "sync_with_cursor": true,
    "track_changes": true,
    "preserve_context": true,
    "ai_organization": true
  },
  "tools": {
    "enabled": true,
    "auto_bypass_permissions": true,
    "dangerous_commands": false,
    "tmux_integration": true
  }
}
EOF
    
    # CLAUDE.mdファイルの生成
    cat > .claude/CLAUDE.md << 'EOF'
# Claude Code プロジェクト設定（AI組織システム対応）

## プロジェクト概要
- **名前**: AI開発支援プロジェクト
- **目的**: AI組織システム + Cursor連携による革新的開発環境
- **言語**: 日本語メイン
- **特徴**: PRESIDENT、BOSS、WORKER による協調開発

## 重要なルール
1. **日本語でコミュニケーション**: すべてのやり取りは日本語で行う
2. **ユーザー要求最優先**: ユーザーの指示を正確に理解し実行する
3. **機能保持**: 既存機能を勝手に変更・削除しない
4. **AI組織連携**: AI組織システムとの一貫性を保つ
5. **「>」自動実行**: 指示には「>」を付けて自動実行対応

## AI組織システム構成
```
PRESIDENT (統括責任者)
    ↓
BOSS1 (チームリーダー)
    ↓
WORKER1, WORKER2, WORKER3 (実行担当)
```

## 重要なコマンド
- **起動**: `./ai-agents/manage.sh auto`
- **半自動起動**: `./ai-agents/manage.sh claude-auth`
- **状況確認**: `./ai-agents/manage.sh status`
- **設定確認**: `./setup.sh s`

## ファイル構造
```
.claude/
├── claude_desktop_config.json  # Claude Code設定
├── CLAUDE.md                   # このファイル
└── project_context.md          # プロジェクト文脈情報

ai-agents/
├── manage.sh                   # AI組織管理スクリプト
├── instructions/               # AI役割定義
└── logs/                      # 動作ログ
```

## 注意事項
- `.claude/`ディレクトリは.gitignoreに追加されており、ローカル設定のみ
- 設定は各環境で自動生成されるため、手動編集は非推奨
- 更新時は`./ai-agents/manage.sh setup-claude-config`で再設定
EOF
    
    # プロジェクト文脈情報の生成
    cat > .claude/project_context.md << 'EOF'
# プロジェクト文脈情報

## 現在のプロジェクト状況
- **プロジェクト名**: AI開発支援ツール
- **フェーズ**: 継続的改善・運用
- **主要技術**: Bash, AI組織システム, tmux

## AI組織システムの特徴
- **PRESIDENT**: プロジェクト統括、意思決定
- **BOSS1**: チームリーダー、作業分担管理
- **WORKER1-3**: 専門分野での実行担当

## 革新的機能
- **「>」自動実行**: Claude Code の自動実行機能活用
- **tmux連携**: マルチペイン管理とリアルタイム監視
- **動的UI**: ステータス表示とクリック移動対応

## 最近の重要な改善
- AI組織システムの完全自動化達成
- 「>」プレフィックスによる自動実行システム
- リアルタイムステータス更新機能
- .claude設定のローカル化対応

## 開発方針
1. **AI協調**: 複数AIによる効率的な協調開発
2. **自動化**: 手動作業の最小化
3. **ユーザビリティ**: 直感的な操作性
4. **拡張性**: 新機能の追加容易性
EOF
    
    log_success "✅ .claude設定生成完了！"
    echo ""
    echo "📁 生成されたファイル:"
    echo "   - .claude/claude_desktop_config.json"
    echo "   - .claude/CLAUDE.md"
    echo "   - .claude/project_context.md"
    echo ""
    echo "🎯 Claude Code起動時にこれらの設定が自動的に読み込まれます"
}

# メイン処理（参照リポジトリ準拠）
main() {
    init_dirs
    
    case "${1:-help}" in
        # 🚀 参照リポジトリ準拠の基本コマンド
        "start")
            # tmuxセッション作成のみ
            log_info "🚀 tmuxセッション作成中..."
            launch_tmux_sessions
            echo ""
                echo "🚀 次のステップを自動実行中..."
    echo "  1. PRESIDENT認証 → 自動実行中..."
    
    # 自動でPRESIDENT認証実行
    if claude_auth_function; then
        echo "  ✅ PRESIDENT認証完了"
        echo ""
        echo "  2. multiagent起動 → 自動実行中..."
        
        # 自動でmultiagent起動実行（該当コマンドがあれば）
        if command -v multiagent-start &> /dev/null || grep -q "multiagent-start" "$0"; then
            multiagent_start_function
            echo "  ✅ multiagent起動完了"
        else
            echo "  💡 multiagent起動機能は既にclaude-auth内で実行済み"
        fi
        
        echo ""
        echo "🎉 全ステップ自動実行完了！"
        echo "💡 次のアクション："
        echo "   ./ai-agents/manage.sh president     # PRESIDENT画面"
        echo "   ./ai-agents/manage.sh multiagent    # 4人チーム画面"
    else
        echo "  ❌ PRESIDENT認証でエラーが発生しました"
        echo "💡 手動実行："
        echo "  ./ai-agents/manage.sh claude-auth     # PRESIDENT認証"
        echo "  ./ai-agents/manage.sh multiagent      # multiagent確認"
    fi
            echo ""
            ;;
        "claude-auth")
            # シンプル認証システム起動
            simple_claude_auth
            ;;
        "perfect-auto")
            # 🚀 完璧な自動実行監視開始
            start_perfect_auto_execute_monitor
            ;;
        "stop-perfect-auto")
            # 🛑 完璧な自動実行監視停止
            stop_perfect_auto_execute
            ;;
        "auto")
            # 🚀 ワンコマンド起動（初心者向け自動認証システム使用）
            beginner_friendly_claude_auth
            ;;
        "multiagent-start")
            # multiagent一括起動（段階2）
            manual_multiagent_start
            ;;
        "force-workers")
            # 🚀 ワーカー強制起動（緊急用）
            force_start_workers
            ;;
        "restore-ui")
            # 🎨 チームUI復旧（緊急用）
            restore_team_ui
            ;;
        "auto-execute")
            # 🚀 自動実行監視開始（旧版）
            start_auto_execute_monitor
            ;;
        "stop-auto-execute")
            # 🛑 自動実行監視停止（旧版）
            stop_auto_execute_monitor
            ;;
        "setup-claude-config")
            # 🔧 .claude設定自動生成
            setup_claude_local_config
            ;;
        "monitoring")
            # 🔍 プレジデント状況把握システム開始
            start_president_monitoring
            ;;
        "stop-monitoring")
            # 🛑 プレジデント状況把握システム停止
            stop_president_monitoring
            ;;
        "log-check"|"logs")
            # 🔍 重要ログ統合確認システム
            if [ -f "./ai-agents/log-check.sh" ]; then
                ./ai-agents/log-check.sh "${2:-all}"
            else
                log_error "❌ log-check.sh が見つかりません"
            fi
            ;;
        "startup-check"|"startup")
            # 🚀 AI作業開始時統合チェックシステム（AI向け）
            if [ -f "./ai-agents/startup-check.sh" ]; then
                ./ai-agents/startup-check.sh "${2:-full}"
            else
                log_error "❌ startup-check.sh が見つかりません"
            fi
            ;;
        "start")
            # 🚀 AI組織システム統一起動（claude-authと同じ）
            simple_claude_auth
            ;;
        "user-guide"|"guide")
            # 🎯 初心者向けAI組織立ち上げガイド（人間向け）
            if [ -f "./ai-agents/user-guide.sh" ]; then
                ./ai-agents/user-guide.sh "${2:-full}"
            else
                log_error "❌ user-guide.sh が見つかりません"
            fi
            ;;
        "president")  
            # PRESIDENT画面アタッチ
            if tmux has-session -t president 2>/dev/null; then
                tmux attach-session -t president
            else
                log_error "❌ presidentセッションが存在しません。先に './ai-agents/manage.sh claude-auth' を実行してください"
            fi
            ;;
        "multiagent")
            # multiagent画面アタッチ
            if tmux has-session -t multiagent 2>/dev/null; then
                tmux attach-session -t multiagent
            else
                log_error "❌ multiagentセッションが存在しません。先に './ai-agents/manage.sh claude-auth' を実行してください"
            fi
            ;;
        "clean")
            # セッション削除
            clean_sessions
            ;;
        # 🔧 詳細コマンド（必要時のみ）
        "quick-start")
            quick_start
            ;;
        "claude-setup")
            setup_claude_code
            ;;
        "status")
            system_status
            ;;
        "help"|"--help"|"-h"|*)
            echo "🤖 AI組織システム - 完全復旧版"
            echo "============================"
            echo ""
            echo "🚀 AI組織システム起動:"
            echo "  ./ai-agents/manage.sh start              # AI組織システム起動（推奨）"
            echo "  ./ai-agents/manage.sh start --guide      # ガイド付き起動（初心者向け）"
            echo "  ./ai-agents/manage.sh claude-auth        # 従来の起動方法（互換性）"
            echo ""
            echo "🔧 完璧な自動実行システム:"
            echo "  ./ai-agents/manage.sh perfect-auto       # 完璧な自動実行監視開始"
            echo "  ./ai-agents/manage.sh stop-perfect-auto  # 完璧な自動実行監視停止"
            echo ""
            echo "📊 セッション操作:"
            echo "  ./ai-agents/manage.sh president          # PRESIDENT画面"
            echo "  ./ai-agents/manage.sh multiagent         # 4画面確認"
            echo "  ./ai-agents/manage.sh force-workers      # ワーカー強制起動"
            echo "  ./ai-agents/manage.sh restore-ui         # UI復旧"
            echo "  ./ai-agents/manage.sh clean              # セッション削除"
            echo ""
            echo "🔍 軽量監視システム:"
            echo "  ./ai-agents/manage.sh monitoring         # プレジデント状況把握開始（15秒間隔）"
            echo "  ./ai-agents/manage.sh stop-monitoring    # プレジデント状況把握停止"
            echo ""
            echo "💡 便利機能:"
            echo "  ./ai-agents/manage.sh guide status       # 現在の状況確認"
            echo "  ./ai-agents/manage.sh guide quick        # クイックガイド"
            echo ""
            echo "📋 ログ管理システム（AI向け）:"
            echo "  ./ai-agents/manage.sh startup-check      # AI作業開始時統合チェック"
            echo "  ./ai-agents/manage.sh log-check          # 重要ログ統合確認"
            echo ""
            echo "💡 【完全復旧版の特徴】:"
            echo "  ✅ バックグラウンド処理を排除"
            echo "  ✅ 段階的で確実な起動"
            echo "  ✅ 完璧な自動実行監視"
            echo "  ✅ 軽量で高速な処理"
            echo ""
            ;;
    esac
}

# 🚀 完璧な自動実行監視システム（軽量・確実版）
start_perfect_auto_execute_monitor() {
    log_info "🚀 完璧な自動実行監視システム開始"
    
    # セッション存在確認
    if ! tmux has-session -t multiagent 2>/dev/null; then
        log_error "❌ multiagentセッションが存在しません"
        return 1
    fi
    
    # 軽量バックグラウンド監視開始（互換性改善版）
    nohup bash -c '
        exec > /tmp/ai-perfect-auto-execute.log 2>&1
        echo "$(date): 完璧な自動実行監視開始（互換性改善版）"
        
        # 各ワーカーの前回画面内容保存（配列不使用版）
        prev_screen_0=""
        prev_screen_1=""
        prev_screen_2=""
        prev_screen_3=""
        
        # 初期画面内容取得
        prev_screen_0=$(tmux capture-pane -t multiagent:0.0 -p 2>/dev/null | tail -3)
        prev_screen_1=$(tmux capture-pane -t multiagent:0.1 -p 2>/dev/null | tail -3)
        prev_screen_2=$(tmux capture-pane -t multiagent:0.2 -p 2>/dev/null | tail -3)
        prev_screen_3=$(tmux capture-pane -t multiagent:0.3 -p 2>/dev/null | tail -3)
        
        echo "$(date): 監視対象初期化完了（互換性改善版）"
        
        while true; do
            # WORKER0 (BOSS) 監視
            current_screen_0=$(tmux capture-pane -t multiagent:0.0 -p 2>/dev/null | tail -3)
            if [ "$current_screen_0" != "$prev_screen_0" ]; then
                echo "$(date): BOSS 画面変化検出"
                
                # 自動実行判定
                if echo "$current_screen_0" | grep -qE "^> .+" 2>/dev/null; then
                    echo "$(date): BOSS 自動実行開始 - プロンプト入力検出"
                    tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [🟢 実行中]"
                    tmux send-keys -t multiagent:0.0 C-m
                    sleep 0.2
                    tmux send-keys -t multiagent:0.0 Enter
                    echo "$(date): BOSS Enterキー送信完了"
                    
                    # 2秒後にステータス復旧
                    (sleep 2; tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [🟡 待機中]") &
                fi
                prev_screen_0="$current_screen_0"
            fi
            
            # WORKER1 監視
            current_screen_1=$(tmux capture-pane -t multiagent:0.1 -p 2>/dev/null | tail -3)
            if [ "$current_screen_1" != "$prev_screen_1" ]; then
                echo "$(date): WORKER1 画面変化検出"
                
                if echo "$current_screen_1" | grep -qE "^> .+" 2>/dev/null; then
                    echo "$(date): WORKER1 自動実行開始 - プロンプト入力検出"
                    tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [🟢 実行中]"
                    tmux send-keys -t multiagent:0.1 C-m
                    sleep 0.2
                    tmux send-keys -t multiagent:0.1 Enter
                    echo "$(date): WORKER1 Enterキー送信完了"
                    
                    (sleep 2; tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [🟡 待機中]") &
                fi
                prev_screen_1="$current_screen_1"
            fi
            
            # WORKER2 監視
            current_screen_2=$(tmux capture-pane -t multiagent:0.2 -p 2>/dev/null | tail -3)
            if [ "$current_screen_2" != "$prev_screen_2" ]; then
                echo "$(date): WORKER2 画面変化検出"
                
                if echo "$current_screen_2" | grep -qE "^> .+" 2>/dev/null; then
                    echo "$(date): WORKER2 自動実行開始 - プロンプト入力検出"
                    tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [🟢 実行中]"
                    tmux send-keys -t multiagent:0.2 C-m
                    sleep 0.2
                    tmux send-keys -t multiagent:0.2 Enter
                    echo "$(date): WORKER2 Enterキー送信完了"
                    
                    (sleep 2; tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [🟡 待機中]") &
                fi
                prev_screen_2="$current_screen_2"
            fi
            
            # WORKER3 監視
            current_screen_3=$(tmux capture-pane -t multiagent:0.3 -p 2>/dev/null | tail -3)
            if [ "$current_screen_3" != "$prev_screen_3" ]; then
                echo "$(date): WORKER3 画面変化検出"
                
                if echo "$current_screen_3" | grep -qE "^> .+" 2>/dev/null; then
                    echo "$(date): WORKER3 自動実行開始 - プロンプト入力検出"
                    tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [🟢 実行中]"
                    tmux send-keys -t multiagent:0.3 C-m
                    sleep 0.2
                    tmux send-keys -t multiagent:0.3 Enter
                    echo "$(date): WORKER3 Enterキー送信完了"
                    
                    (sleep 2; tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [🟡 待機中]") &
                fi
                prev_screen_3="$current_screen_3"
            fi
            
            # 15秒間隔で監視（軽量・効率的）
            sleep 15
        done
    ' &
    
    PERFECT_AUTO_PID=$!
    echo $PERFECT_AUTO_PID > /tmp/ai-perfect-auto-execute.pid
    
    log_success "✅ 完璧な自動実行監視システム開始（PID: $PERFECT_AUTO_PID）"
    echo ""
    echo "📋 監視ログ確認:"
    echo "  tail -f /tmp/ai-perfect-auto-execute.log"
    echo ""
    echo "🛑 停止方法:"
    echo "  ./ai-agents/manage.sh stop-perfect-auto"
    echo ""
}

# 🛑 完璧な自動実行監視停止
stop_perfect_auto_execute() {
    log_info "🛑 完璧な自動実行監視停止中..."
    
    if [ -f /tmp/ai-perfect-auto-execute.pid ]; then
        PERFECT_AUTO_PID=$(cat /tmp/ai-perfect-auto-execute.pid)
        if kill $PERFECT_AUTO_PID 2>/dev/null; then
            log_success "✅ 完璧な自動実行監視を停止（PID: $PERFECT_AUTO_PID）"
            rm -f /tmp/ai-perfect-auto-execute.pid
        else
            log_warn "⚠️ プロセスは既に停止しています"
        fi
    else
        log_warn "⚠️ 完璧な自動実行監視は開始されていません"
    fi
}

# 🚀 シンプル認証システム（手動認証+自動再起動）
simple_claude_auth() {
    echo ""
    echo "🚀 AI組織システム起動中..."
    echo ""
    
    # 既存セッション削除
    tmux kill-session -t president 2>/dev/null || true
    tmux kill-session -t multiagent 2>/dev/null || true
    
    # セッション作成
    echo "📋 セッション作成中..."
    tmux new-session -d -s president -c "$(pwd)"
    tmux new-session -d -s multiagent -c "$(pwd)"
    tmux split-window -h -t multiagent
    tmux split-window -v -t multiagent:0.0
    tmux split-window -v -t multiagent:0.1
    tmux select-layout -t multiagent tiled
    
    # PRESIDENT起動
    echo "📋 PRESIDENT起動中..."
    tmux send-keys -t president "claude --dangerously-skip-permissions" C-m
    
    # 認証チェック（正確な判定）
    echo "🔑 認証状況確認中..."
    sleep 5
    
    screen_content=$(tmux capture-pane -t president -p 2>/dev/null || echo "")
    
    # 既に認証済み（Welcome画面まで進んでいる）
    if echo "$screen_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
        echo "✅ 認証済み - 自動設定継続中..."
    # 未認証（テーマ選択やBypass Permissions画面）
    elif echo "$screen_content" | grep -qE "(theme|Bypassing Permissions|Select a theme)" 2>/dev/null; then
        echo ""
        echo "🔑 認証が必要です。手動で認証してください："
        echo "   1. tmux attach-session -t president"
        echo "   2. テーマ選択・認証画面で適切なオプションを選択"
        echo "   3. 認証完了後、Ctrl+B → D でデタッチ"
        echo "   4. 再度 ./ai-agents/manage.sh claude-auth を実行"
        echo ""
        return 0
    else
        # 起動中の場合、もう少し待つ
        echo "⏳ Claude Code起動中..."
        sleep 3
        screen_content=$(tmux capture-pane -t president -p 2>/dev/null || echo "")
        if echo "$screen_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
            echo "✅ 認証済み - 自動設定継続中..."
        else
            echo ""
            echo "🔑 認証が必要です。手動で認証してください："
            echo "   1. tmux attach-session -t president"
            echo "   2. 認証画面で適切なオプションを選択"
            echo "   3. 認証完了後、Ctrl+B → D でデタッチ"
            echo "   4. 再度 ./ai-agents/manage.sh claude-auth を実行"
            echo ""
            return 0
        fi
    fi
    
    # PRESIDENT起動確認
    for i in {1..30}; do
        screen_content=$(tmux capture-pane -t president -p 2>/dev/null || echo "")
        if echo "$screen_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
            echo "✅ PRESIDENT起動完了"
            break
        fi
        sleep 1
    done
    
    # PRESIDENT設定（超高速化）
    echo "📋 PRESIDENT設定中..."
    tmux send-keys -t president ">あなたはプレジデントです。./ai-agents/instructions/president.mdの指示書を参照してください。" C-m
    sleep 0.2
    tmux send-keys -t president ">【重要】部下への指示は必ず「>」で始めてください。" C-m
    sleep 0.2
    
    # ワーカー起動＋完全自動認証システム
    echo "📋 ワーカー起動中..."
    
    # ステータス表示システム復活
    tmux set-option -g pane-border-status top
    tmux set-option -g pane-border-format '#[fg=colour15,bg=colour4,bold]#{?pane_active, 🎯 選択中 ,}#[fg=colour7,bg=colour8]#{?pane_active,, 待機中 } #[fg=colour15,bold]#{pane_title}#[default]'
    
    for i in {0..3}; do
        case $i in
            0) worker_name="BOSS・チームリーダー"; worker_emoji="👔" ;;
            1) worker_name="WORKER1・フロントエンド"; worker_emoji="💻" ;;
            2) worker_name="WORKER2・バックエンド"; worker_emoji="🔧" ;;
            3) worker_name="WORKER3・デザイン"; worker_emoji="🎨" ;;
        esac
        
        # 初期ステータス設定
        tmux select-pane -t multiagent:0.$i -T "${worker_emoji} ${worker_name} [🔄 起動中]"
        
        echo "🚀 ${worker_name} 起動中..."
        tmux send-keys -t multiagent:0.$i "claude --dangerously-skip-permissions" C-m
        
                # 高速認証システム（短時間タイムアウト）
        auth_completed=false
        for retry in {1..5}; do
            sleep 0.5
            worker_content=$(tmux capture-pane -t multiagent:0.$i -p 2>/dev/null || echo "")
            
            # 起動完了確認（最優先）
            if echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                echo "✅ ${worker_name} 起動完了"
                tmux select-pane -t multiagent:0.$i -T "${worker_emoji} ${worker_name} [🟢 起動完了]"
                break
            fi
            
            # Bypass Permissions自動選択（一度だけ）
            if echo "$worker_content" | grep -q "Bypassing Permissions" 2>/dev/null && [ "$auth_completed" = false ]; then
                echo "🔑 ${worker_name} 認証中..."
                tmux select-pane -t multiagent:0.$i -T "${worker_emoji} ${worker_name} [🔑 認証中]"
                tmux send-keys -t multiagent:0.$i "2" C-m
                auth_completed=true
                sleep 1
                continue
            fi
        done
        
        # 起動確認後の役割設定
        if echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
            echo "📋 ${worker_name} 役割設定中..."
            tmux select-pane -t multiagent:0.$i -T "${worker_emoji} ${worker_name} [📋 設定中]"
            case $i in
                0) tmux send-keys -t multiagent:0.0 ">あなたはBOSSです。./ai-agents/instructions/boss.mdを参照してください。" C-m ;;
                1) tmux send-keys -t multiagent:0.1 ">あなたはWORKER1です。./ai-agents/instructions/worker.mdを参照してください。" C-m ;;
                2) tmux send-keys -t multiagent:0.2 ">あなたはWORKER2です。./ai-agents/instructions/worker.mdを参照してください。" C-m ;;
                3) tmux send-keys -t multiagent:0.3 ">あなたはWORKER3です。./ai-agents/instructions/worker.mdを参照してください。" C-m ;;
            esac
            
            tmux select-pane -t multiagent:0.$i -T "${worker_emoji} ${worker_name} [🟡 待機中]"
            echo "✅ ${worker_name} 設定完了"
        else
            if [ $retry -eq 5 ]; then
                echo "❌ ${worker_name} 起動タイムアウト（2.5秒）"
                tmux select-pane -t multiagent:0.$i -T "${worker_emoji} ${worker_name} [❌ エラー]"
            fi
        fi
    done
    
    # 最終設定＋リアルタイムステータス監視開始
    tmux set-option -t multiagent mouse on
    
    # PRESTIDENTステータス設定
    tmux select-pane -t president:0 -T "👑 PRESIDENT・統括責任者 [🟢 稼働中]"
    
    # リアルタイムステータス監視開始
    echo "🔍 リアルタイムステータス監視開始..."
    start_realtime_status_monitor &
    
    # 完全自動実行システム開始
    echo "🎯 完全自動実行システム開始..."
    start_full_auto_execute_system &
    
    echo ""
    echo "🎉 AI組織システム起動完了！"
    echo ""
    echo "📊 現在のステータス:"
    echo "   👑 PRESIDENT: 🟢 稼働中"
    echo "   👔 BOSS: 🟡 待機中"  
    echo "   💻 WORKER1: 🟡 待機中"
    echo "   🔧 WORKER2: 🟡 待機中"
    echo "   🎨 WORKER3: 🟡 待機中"
    echo ""
    echo "💡 使用方法:"
    echo "   ./ai-agents/manage.sh president     # PRESIDENT画面"
    echo "   ./ai-agents/manage.sh multiagent    # 4画面確認"
    echo ""
    
    # PRESIDENT画面に自動接続
    echo "👑 PRESIDENT画面に自動接続中..."
    echo "💡 プロジェクトの指示を入力してください（「>」で始めると自動実行）"
    tmux attach-session -t president
}

# 🚀 自動Enter実行システム（修正版・タイミング調整）
auto_execute_messages() {
    log_info "🎯 自動Enter実行システム起動中..."
    
    # プレジデント自動Enter実行（メッセージ処理完了後）
    log_info "📤 PRESIDENT自動Enter実行中..."
    sleep 5  # メッセージ処理完了待機
    tmux send-keys -t president C-m
    log_success "✅ PRESIDENT自動Enter完了"
    
    # ワーカー起動完了待機
    log_info "⏳ ワーカー起動完了待機中..."
    sleep 15  # ワーカー起動・役割設定時間確保
    
    # 全ワーカー自動Enter実行
    for i in {0..3}; do
        case $i in
            0) worker_name="BOSS" ;;
            1) worker_name="WORKER1" ;;
            2) worker_name="WORKER2" ;;
            3) worker_name="WORKER3" ;;
        esac
        
        log_info "📤 ${worker_name} 自動Enter実行中..."
        tmux send-keys -t multiagent:0.$i C-m
        sleep 2  # 連続送信間隔
        log_success "✅ ${worker_name} 自動Enter完了"
    done
    
    log_success "🎉 全エージェント自動Enter実行完了！"
}

# 🔍 軽量監視システム（トークン効率重視）
start_lightweight_monitor() {
    log_info "🔍 軽量監視システム起動（トークン効率重視）"
    
    nohup bash -c '
        exec > /tmp/ai-lightweight-monitor.log 2>&1
        echo "$(date): 軽量監視システム開始"
        
        while true; do
            # 簡単なアクティビティ監視のみ（トークン使用なし）
            active_count=0
            
            # 各セッションの基本生存確認のみ
            if tmux has-session -t president 2>/dev/null; then
                ((active_count++))
            fi
            
            if tmux has-session -t multiagent 2>/dev/null; then
                ((active_count++))
            fi
            
            # ステータス更新（軽量）
            current_time=$(date "+%H:%M:%S")
            tmux set-option -g status-right "#[bg=colour4,fg=colour15] 🕐 $current_time │ 💡 セッション: ${active_count}/2 稼働中 #[default]" 2>/dev/null || true
            
            echo "$(date): 軽量監視完了 - セッション: ${active_count}/2"
            
            # 30秒間隔（トークン消費ゼロ）
            sleep 30
        done
    ' &
    
    log_success "✅ 軽量監視システム起動完了（30秒間隔・トークン消費ゼロ）"
}

# プレジデント状況把握システム（15秒間隔軽量監視）
start_president_monitoring() {
    log_info "🔍 プレジデント状況把握システム起動中..."
    
    nohup bash -c '
        exec > /tmp/president-monitoring.log 2>&1
        echo "$(date): プレジデント状況把握システム開始 - 15秒間隔軽量監視"
        
        while true; do
            # 15秒間隔で全体状況をプレジデントに報告
            
            # 1. 各ワーカーの生存確認
            president_status="❌ 未起動"
            active_workers=0
            worker_details=""
            
            # PRESIDENT生存確認
            if tmux has-session -t president 2>/dev/null; then
                president_content=$(tmux capture-pane -t president -p 2>/dev/null | tail -3)
                if echo "$president_content" | grep -qE "Please let me know|How can I help|What would you like" 2>/dev/null; then
                    president_status="🟢 アクティブ対話中"
                elif echo "$president_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                    president_status="🟡 起動済み・待機中"
                fi
            fi
            
            # 各ワーカー生存確認
            for worker_id in {0..3}; do
                if tmux has-session -t multiagent 2>/dev/null; then
                    worker_content=$(tmux capture-pane -t multiagent:0.$worker_id -p 2>/dev/null || echo "")
                    
                    case $worker_id in
                        0) # BOSS
                            if echo "$worker_content" | grep -qE "Please let me know|How can I help|分析|レポート" 2>/dev/null; then
                                worker_details="${worker_details}  👔 BOSS: 🟢 チーム指導中\n"
                                ((active_workers++))
                            elif echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                                worker_details="${worker_details}  👔 BOSS: 🟡 指示待機中\n"
                            else
                                worker_details="${worker_details}  👔 BOSS: ❌ 未起動\n"
                            fi
                            ;;
                        1) # WORKER1
                            if echo "$worker_content" | grep -qE "Please let me know|React|Vue|CSS|HTML" 2>/dev/null; then
                                worker_details="${worker_details}  💻 WORKER1: 🟢 UI実装中\n"
                                ((active_workers++))
                            elif echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                                worker_details="${worker_details}  💻 WORKER1: 🟡 実装待機中\n"
                            else
                                worker_details="${worker_details}  💻 WORKER1: ❌ 未起動\n"
                            fi
                            ;;
                        2) # WORKER2
                            if echo "$worker_content" | grep -qE "Please let me know|API|Node|Python|データベース" 2>/dev/null; then
                                worker_details="${worker_details}  🔧 WORKER2: 🟢 開発中\n"
                                ((active_workers++))
                            elif echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                                worker_details="${worker_details}  🔧 WORKER2: 🟡 開発待機中\n"
                            else
                                worker_details="${worker_details}  🔧 WORKER2: ❌ 未起動\n"
                            fi
                            ;;
                        3) # WORKER3
                            if echo "$worker_content" | grep -qE "Please let me know|デザイン|UI|UX|視覚" 2>/dev/null; then
                                worker_details="${worker_details}  🎨 WORKER3: 🟢 設計中\n"
                                ((active_workers++))
                            elif echo "$worker_content" | grep -q "Welcome to Claude Code" 2>/dev/null; then
                                worker_details="${worker_details}  🎨 WORKER3: 🟡 設計待機中\n"
                            else
                                worker_details="${worker_details}  🎨 WORKER3: ❌ 未起動\n"
                            fi
                            ;;
                    esac
                else
                    worker_details="${worker_details}  ❌ multiagentセッション未起動\n"
                fi
            done
            
            # 2. 異常検知
            alerts=""
            if [ "$president_status" = "❌ 未起動" ]; then
                alerts="${alerts}🚨 PRESIDENT未起動\n"
            fi
            if [ $active_workers -eq 0 ]; then
                alerts="${alerts}🚨 全ワーカー非稼働\n"
            fi
            if ! tmux has-session -t president 2>/dev/null && ! tmux has-session -t multiagent 2>/dev/null; then
                alerts="${alerts}🚨 システム完全停止\n"
            fi
            
            # 3. プレジデントに状況報告メッセージ送信（自動Enter無し）
            if tmux has-session -t president 2>/dev/null; then
                current_time=$(date "+%H:%M:%S")
                status_message="【軽量監視レポート - $current_time】
👑 PRESIDENT: $president_status
📊 稼働中: $active_workers/4 ワーカー

📋 詳細状況:
$worker_details
${alerts:+🚨 異常検知:
$alerts}
次回監視: 15秒後"
                
                # プレジデントの画面に状況報告を送信（Enter無し・表示のみ）
                echo "$status_message" | while IFS= read -r line; do
                    tmux send-keys -t president "$line"
                    tmux send-keys -t president C-m
                    sleep 0.1
                done
            fi
            
            # ログ記録
            echo "$(date): [監視] PRESIDENT: $president_status, 稼働ワーカー: $active_workers/4"
            if [ -n "$alerts" ]; then
                echo "$(date): [異常] $alerts" | tr -d '\n'
            fi
            
            # 15秒間隔で次回監視
            sleep 15
        done
    ' &
    
    MONITORING_PID=$!
    echo $MONITORING_PID > /tmp/president-monitoring.pid
    log_success "✅ プレジデント状況把握システム起動完了（PID: $MONITORING_PID）"
}

# 監視システム停止
stop_president_monitoring() {
    if [ -f /tmp/president-monitoring.pid ]; then
        MONITORING_PID=$(cat /tmp/president-monitoring.pid)
        kill $MONITORING_PID 2>/dev/null || true
        rm -f /tmp/president-monitoring.pid
        log_success "✅ プレジデント状況把握システム停止完了"
    else
        log_warn "⚠️ 監視システムが起動していません"
    fi
}

# 🔍 リアルタイムステータス監視システム（○表示復活）
start_realtime_status_monitor() {
    nohup bash -c '
        exec > /tmp/ai-realtime-status.log 2>&1
        echo "$(date): リアルタイムステータス監視開始"
        
        while true; do
            current_time=$(date "+%H:%M:%S")
            
            # 各エージェントのステータス監視
            for worker_id in {0..3}; do
                if tmux has-session -t multiagent 2>/dev/null; then
                    worker_content=$(tmux capture-pane -t multiagent:0.$worker_id -p 2>/dev/null || echo "")
                    
                    case $worker_id in
                        0) # BOSS
                            if echo "$worker_content" | grep -qE "> " 2>/dev/null; then
                                tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [🟢 実行中]"
                            elif echo "$worker_content" | grep -qE "思考中|分析|検討" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [🧠 思考中]"
                            elif echo "$worker_content" | grep -q "Please let me know" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.0 -T "👔 BOSS・チームリーダー [🟡 待機中]"
                            fi
                            ;;
                        1) # WORKER1
                            if echo "$worker_content" | grep -qE "> " 2>/dev/null; then
                                tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [🟢 実行中]"
                            elif echo "$worker_content" | grep -qE "実装|コード|CSS|HTML" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [⚙️ 開発中]"
                            elif echo "$worker_content" | grep -q "Please let me know" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.1 -T "💻 WORKER1・フロントエンド [🟡 待機中]"
                            fi
                            ;;
                        2) # WORKER2
                            if echo "$worker_content" | grep -qE "> " 2>/dev/null; then
                                tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [🟢 実行中]"
                            elif echo "$worker_content" | grep -qE "API|データベース|サーバー" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [⚙️ 開発中]"
                            elif echo "$worker_content" | grep -q "Please let me know" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.2 -T "🔧 WORKER2・バックエンド [🟡 待機中]"
                            fi
                            ;;
                        3) # WORKER3
                            if echo "$worker_content" | grep -qE "> " 2>/dev/null; then
                                tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [🟢 実行中]"
                            elif echo "$worker_content" | grep -qE "デザイン|UI|UX|視覚" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [🎨 設計中]"
                            elif echo "$worker_content" | grep -q "Please let me know" 2>/dev/null; then
                                tmux select-pane -t multiagent:0.3 -T "🎨 WORKER3・デザイン [🟡 待機中]"
                            fi
                            ;;
                    esac
                fi
            done
            
            # PRESIDENT監視
            if tmux has-session -t president 2>/dev/null; then
                president_content=$(tmux capture-pane -t president -p 2>/dev/null || echo "")
                if echo "$president_content" | grep -qE "> " 2>/dev/null; then
                    tmux select-pane -t president:0 -T "👑 PRESIDENT・統括責任者 [🟢 指示中]"
                elif echo "$president_content" | grep -qE "思考|検討|分析" 2>/dev/null; then
                    tmux select-pane -t president:0 -T "👑 PRESIDENT・統括責任者 [🧠 思考中]"
                else
                    tmux select-pane -t president:0 -T "👑 PRESIDENT・統括責任者 [🟡 待機中]"
                fi
            fi
            
            # 3秒間隔で高速更新
            sleep 3
        done
    ' &
    
    echo $! > /tmp/ai-realtime-status.pid
    log_success "✅ リアルタイムステータス監視開始（PID: $(cat /tmp/ai-realtime-status.pid)）"
}

# 🎯 完全自動実行システム（「>」付きメッセージの完全自動実行）
start_full_auto_execute_system() {
    nohup bash -c '
        exec > /tmp/ai-full-auto-execute.log 2>&1
        echo "$(date): 完全自動実行システム開始"
        
        # 前回の画面内容を保存
        prev_president=""
        prev_boss=""
        prev_worker1=""
        prev_worker2=""
        prev_worker3=""
        
        while true; do
            # PRESIDENT監視＋自動実行
            if tmux has-session -t president 2>/dev/null; then
                current_president=$(tmux capture-pane -t president -p 2>/dev/null | tail -5)
                if [ "$current_president" != "$prev_president" ]; then
                    if echo "$current_president" | grep -qE "^> .+" 2>/dev/null; then
                        echo "$(date): PRESIDENT 自動実行開始"
                        tmux send-keys -t president C-m
                        sleep 0.3
                        tmux send-keys -t president Enter
                    fi
                    prev_president="$current_president"
                fi
            fi
            
            # 各ワーカー監視＋自動実行
            if tmux has-session -t multiagent 2>/dev/null; then
                # BOSS
                current_boss=$(tmux capture-pane -t multiagent:0.0 -p 2>/dev/null | tail -5)
                if [ "$current_boss" != "$prev_boss" ]; then
                    if echo "$current_boss" | grep -qE "^> .+" 2>/dev/null; then
                        echo "$(date): BOSS 自動実行開始"
                        tmux send-keys -t multiagent:0.0 C-m
                        sleep 0.3
                        tmux send-keys -t multiagent:0.0 Enter
                    fi
                    prev_boss="$current_boss"
                fi
                
                # WORKER1
                current_worker1=$(tmux capture-pane -t multiagent:0.1 -p 2>/dev/null | tail -5)
                if [ "$current_worker1" != "$prev_worker1" ]; then
                    if echo "$current_worker1" | grep -qE "^> .+" 2>/dev/null; then
                        echo "$(date): WORKER1 自動実行開始"
                        tmux send-keys -t multiagent:0.1 C-m
                        sleep 0.3
                        tmux send-keys -t multiagent:0.1 Enter
                    fi
                    prev_worker1="$current_worker1"
                fi
                
                # WORKER2
                current_worker2=$(tmux capture-pane -t multiagent:0.2 -p 2>/dev/null | tail-5)
                if [ "$current_worker2" != "$prev_worker2" ]; then
                    if echo "$current_worker2" | grep -qE "^> .+" 2>/dev/null; then
                        echo "$(date): WORKER2 自動実行開始"
                        tmux send-keys -t multiagent:0.2 C-m
                        sleep 0.3
                        tmux send-keys -t multiagent:0.2 Enter
                    fi
                    prev_worker2="$current_worker2"
                fi
                
                # WORKER3
                current_worker3=$(tmux capture-pane -t multiagent:0.3 -p 2>/dev/null | tail -5)
                if [ "$current_worker3" != "$prev_worker3" ]; then
                    if echo "$current_worker3" | grep -qE "^> .+" 2>/dev/null; then
                        echo "$(date): WORKER3 自動実行開始"
                        tmux send-keys -t multiagent:0.3 C-m
                        sleep 0.3
                        tmux send-keys -t multiagent:0.3 Enter
                    fi
                    prev_worker3="$current_worker3"
                fi
            fi
            
            # 1秒間隔で高速監視
            sleep 1
        done
    ' &
    
    echo $! > /tmp/ai-full-auto-execute.pid
    log_success "✅ 完全自動実行システム開始（PID: $(cat /tmp/ai-full-auto-execute.pid)）"
}

# 🛑 自動実行監視停止機能
stop_auto_execute_monitor() {
    log_info "🛑 自動実行監視停止中..."
    
    if [ -f /tmp/ai-agents-auto-execute.pid ]; then
        AUTO_EXECUTE_PID=$(cat /tmp/ai-agents-auto-execute.pid)
        if kill $AUTO_EXECUTE_PID 2>/dev/null; then
            log_success "✅ 自動実行監視を停止しました（PID: $AUTO_EXECUTE_PID）"
            rm -f /tmp/ai-agents-auto-execute.pid
        else
            log_warn "⚠️ プロセス（PID: $AUTO_EXECUTE_PID）は既に停止しています"
        fi
    else
        log_warn "⚠️ 自動実行監視は開始されていません"
    fi
    echo ""
}

# スクリプト実行
main "$@"
