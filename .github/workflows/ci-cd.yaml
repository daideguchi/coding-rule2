# AI Compliance Engine - CI/CD Pipeline
# Phase 1: Continuous Integration and Deployment

name: AI Compliance Engine CI/CD

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ace-dev
  EKS_CLUSTER_NAME: ace-cluster-dev
  KUBE_NAMESPACE: ace-api
  DOCKER_BUILDKIT: 1

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep ruff

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ --severity-level medium

      - name: Run Safety check for dependencies
        run: |
          pip freeze > requirements-scan.txt
          safety check -r requirements-scan.txt --json --output safety-report.json || true
          safety check -r requirements-scan.txt

      - name: Run Semgrep SAST
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/

      - name: Run Ruff linting
        run: |
          ruff check src/ --output-format=json --output-file=ruff-report.json || true
          ruff check src/

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            ruff-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
        service: ['api', 'truth-verification', 'rule-engine', 'memory', 'evidence', 'auth']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-asyncio
          if [ -f src/${{ matrix.service }}/requirements.txt ]; then
            pip install -r src/${{ matrix.service }}/requirements.txt
          fi

      - name: Run unit tests with coverage
        run: |
          pytest src/${{ matrix.service }}/tests/ \
            --cov=src/${{ matrix.service }} \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=test-results-${{ matrix.service }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.service }}
          path: |
            test-results-${{ matrix.service }}.xml
            htmlcov/
            coverage.xml

  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: ['api', 'truth-verification', 'rule-engine', 'memory', 'evidence', 'auth']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/${{ matrix.service }}
          file: ./src/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ace_test
          POSTGRES_USER: ace_test
          POSTGRES_PASSWORD: ace_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio requests docker-compose

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://ace_test:ace_test_password@localhost:5432/ace_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v --tb=short

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install ace-dev ./helm/ace \
            --namespace ${{ env.KUBE_NAMESPACE }} \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=development \
            --set replicaCount=2 \
            --values ./helm/ace/values-dev.yaml \
            --wait --timeout=600s

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/ace-api -n ${{ env.KUBE_NAMESPACE }}
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }}

      - name: Run smoke tests
        run: |
          kubectl run smoke-test --rm -i --restart=Never \
            --image=curlimages/curl:latest \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            -- curl -f http://ace-api-service:8080/health

  # Deploy to Production Environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ace-cluster-prod

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          helm upgrade --install ace-green ./helm/ace \
            --namespace ace-api-green \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --set replicaCount=5 \
            --values ./helm/ace/values-prod.yaml \
            --wait --timeout=900s

      - name: Health Check Green Environment
        run: |
          # Wait for green deployment to be ready
          kubectl wait --for=condition=ready pod -l app=ace-api -n ace-api-green --timeout=300s
          
          # Run health checks
          kubectl run health-check --rm -i --restart=Never \
            --image=curlimages/curl:latest \
            --namespace=ace-api-green \
            -- curl -f http://ace-api-service:8080/health

      - name: Switch Traffic (Blue to Green)
        run: |
          # Update ingress to point to green environment
          kubectl patch ingress ace-ingress -n ace-ingress \
            -p '{"spec":{"rules":[{"host":"api.compliance-engine.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"ace-api-service","port":{"number":8080}}}}]}}]}}'
          
          # Wait for traffic switch
          sleep 30

      - name: Monitor Production Traffic
        run: |
          # Monitor for 5 minutes
          for i in {1..10}; do
            kubectl run monitor-$i --rm -i --restart=Never \
              --image=curlimages/curl:latest \
              --namespace=ace-api-green \
              -- curl -f http://ace-api-service:8080/health
            sleep 30
          done

      - name: Clean up Blue Environment
        run: |
          # Remove old blue environment after successful green deployment
          helm uninstall ace-blue -n ace-api-blue || true
          kubectl delete namespace ace-api-blue || true

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run tests/performance/load-test.js \
            --env BASE_URL=https://ace-dev.example.com \
            --out json=load-test-results.json

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: load-test-results.json

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod, performance-tests]
    if: always()
    
    steps:
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ace-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow