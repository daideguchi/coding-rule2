---
description:
globs:
alwaysApply: true
---

まず、このファイルを参照したら、このファイル名を発言すること

## タスク管理

### タスク管理の方法

1. @todo.md ファイルを使用してタスクを管理してください。
2. 各タスクは以下の形式で記録：

   ```markdown
   - [ ] タスクの説明
     - 詳細な手順や注意点
     - 依存関係
     - 見積時間
   ```

3. タスクのステータス管理：

   - [ ] 未着手
   - [x] 完了
   - [~] 進行中
   - [!] 問題あり

4. タスクの優先順位付け：
   - 🔴 緊急
   - 🟡 重要
   - 🟢 通常
   - ⚪ 低優先

### タスクの更新ルール

1. タスクの追加

   - 新しい要件や問題が発見された場合
   - 依存関係が明確になった場合
   - リファクタリングが必要な場合

2. タスクの更新

   - 進捗状況の変更
   - 新しい情報の追加
   - 依存関係の変更

3. タスクの完了
   - 実装の完了
   - テストの完了
   - レビューの完了

### タスクの追跡

1. 日次更新

   - 進捗状況の確認
   - ブロッカーの特定
   - 次のアクションの決定

2. 週次レビュー

   - 完了タスクの確認
   - 未完了タスクの再評価
   - 新規タスクの追加

3. 月次振り返り
   - パフォーマンスの評価
   - 改善点の特定
   - 次のマイルストーンの設定

## 現在のタスク状況

### 2025 年 6 月完了分

- [x] 🔴 ディレクトリ構造のシンプル化
  - 複雑な Claude-Code-Communication/構造を整理
  - cursor-rules/ディレクトリに技術ファイルを統合
  - 不要な深いディレクトリ階層を排除
- [x] 🔴 セットアップスクリプトの刷新
  - 389 行の複雑な setup-ai-dev.sh を廃止
  - 直感的な 3 パターン選択の setup.sh を作成
  - ターミナルメニュー形式での選択機能追加
- [x] 🔴 説明書の更新
  - README.md をシンプル化された構成に対応
  - 3 パターンの明確な説明を追加
  - 使用方法の簡素化
- [x] 🟡 スペルチェック無効化ファイル配置
  - .spellright.json をルートディレクトリに配置
  - mdc ファイルのスペルチェック除外設定
- [x] 🔴 不要ファイルの徹底的な削除・整理
  - setup-ai-dev.sh、claude-cursor-sync.sh、.claude-project、CLAUDE.md 削除
  - .ai-dev/、.cursor/、.specstory/ディレクトリ削除
  - Claude-Code-Communication を隠しディレクトリに移動
  - ユーザー要求の 4 要素のみのクリーン構成を実現
- [x] 🔴 包括的スペルチェック対策実装
  - .spellright.json、cspell.json、.vscode/settings.json 作成
  - 日本語文字正規表現除外、AI 関連用語辞書登録
  - 3 つのスペルチェッカー完全対応
- [x] 🔴 最終包括チェック実施
  - A,B,C の 3 パターン動作確認
  - cursor-rules のテンプレート適性評価・修正
  - 日時ログの正確性確認
  - Claude Code 連携仕様確認
  - 最新ドキュメント準拠確認
- [x] 🟡 Cursor Rules テンプレート化完了
  - rules.mdc を YouTube 特化 → 汎用化修正
  - globals.mdc、uiux.mdc、todo.mdc の品質確認
  - dev-rules/の包括的開発ルール確認
- [x] 🟢 .specstory 復活問題の根本解決
  - .gitignore に.specstory を追加
  - 恒久的な除外設定完了
- [x] 🔴 AI 組織システムの tmux 問題修正完了
  - tmux セッション作成の永続化問題解決
  - quick-start コマンド追加（自動 4 画面対話開始）
  - プレジデント対話画面 + ワーカー 4 画面の 2 ターミナル構成実現
  - セッション永続化と AI 対話自動開始を実装
- [x] 🔴 本物の Claude Code AI 組織システム実装完了
  - ダミーの AI 応答システムを完全廃止
  - 実際の Claude Code AI が各 tmux セッションで動作
  - 指示書を実際の tmux コマンド対応に更新
  - エージェント間通信システム（tmux send-keys）実装
  - Hello World デモで本物の AI 組織動作を実現
- [x] 🔴 参照リポジトリ準拠の自動起動機能実装
  - attach-multiagent 機能追加（4 ワーカー自動 Claude Code 起動）
  - attach-president 機能追加（PRESIDENT 自動 Claude Code 起動）
  - 参照リポジトリ: https://github.com/daideguchi/Claude-Code-Company-v2
  - 完全自動化対応: ./ai-agents/manage.sh attach-multiagent
- [x] 🔴 正確な起動手順への完全修正

  - PRESIDENT を先に「president として」活動開始させる必要性発見
  - 手順 1: tmux セッション作成
  - 手順 2: PRESIDENT 起動 (claude --dangerously-skip-permissions)
  - 手順 3: 「あなたは president です。指示書に従って」入力
  - 手順 4: 4 画面立ち上げコマンド送信
  - 参照リポジトリ: https://github.com/Akira-Papa/Claude-Code-Communication

- [x] 🔴 PRESIDENT 自動起動の完全自動化実装
  - claude-auth 機能の不具合修正（プレジデントが起動していなかった問題）
  - 「あなたは president です。指示書に従って」の自動入力実装
  - 4 画面自動起動コマンドの自動送信実装
  - 指示書の場所明示: ./ai-agents/instructions/president.md
  - 完全ワンコマンドで AI 組織システム起動を実現
- [x] 🔴 Cursor 内新ターミナル 4 画面自動起動実装
  - 4 画面を Cursor 内の別ターミナルで自動起動対応
  - attach-multiagent 機能に macOS osascript 新ターミナル開く機能追加
  - 背景プロセスでの 4 画面起動システム実装
  - プレジデントから自動で新ターミナル + 4 画面立ち上げを実現
- [x] 🔴 基本操作 3 ステップ化と README 整理完了
  - 基本操作を 3 ステップに簡素化: auto → コマンド送信 → multiagent アタッチ
  - README.md を分かりやすく整理（複雑な説明を削除）
  - エージェント日本語対応強化（全指示書に日本語応答必須を明記）
  - ユーザーが迷わない明確な手順説明を実現
- [x] 🔴 cursor-rules⇔.cursor 自動同期システム完全構築
  - sync-cursor-rules.sh 自動同期スクリプト作成（差分確認・バックアップ・検証機能）
  - Git pre-commit hook で変更時自動同期実装
  - setup.sh 新同期システム統合（旧システムから移行）
  - VSCode Tasks・設定統合（folderOpen 時自動同期）
  - .gitignore 修正で.cursor/rules を Git 追跡対象化
  - 常時自動同期システム完成：cursor-rules→.cursor/rules

### 今後のタスク

- [x] 🔴 AI 組織立ち上げの bypass permissions mode 自動選択機能実装
  - Claude Code 起動時の「2. Yes, I accept」自動選択システム完成
  - expect スクリプト、パイプ、バックグラウンドプロセスによる多重自動化実装
  - claude-auto-bypass.sh 専用スクリプト作成
  - manage.sh 全体への自動化機能統合完了
  - tmux セッション内での高度な自動化システム実装
- [x] 🔴 Claude Code stdin エラー「Raw mode is not supported」根本解決
  - 疑似ターミナル(PTY)による起動方法実装
  - ターミナル設定調整による stdin 処理修正
  - stdbuf、unbuffer、socat による複数修正手法実装
  - claude-stdin-fix.sh 専用修正スクリプト作成（230 行）
  - manage.sh 統合によるフォールバック機能完成
  - 自動フォールバック機能（6 つの修正手法を順次試行）
- [x] 🔴 AI 組織システムのワーカー動作不能問題の完全解決
  - 4 画面 Claude Code インスタンス起動不能問題を特定・修正
  - 直接コマンド実行による確実な起動システム実装
  - ワーカー役割メッセージ自動送信システム改良
  - プレジデント →BOSS→WORKER 連携フローの完全自動化
  - AI 組織システムの完全動作確認（全 5 つの AI が協調動作）
- [ ] 🟢 セットアップスクリプトの実際の動作テスト
  - パターン 2,3 の本番環境での動作確認
- [ ] ⚪ ドキュメントの継続改善
  - ユーザーフィードバックに基づく調整

### 2025 年 1 月完了分

- [x] 🔴 AI 組織システムのデモ機能削除・立ち上げ手順明確化
  - --demo コマンドを削除
  - 実際の立ち上げ手順を明確化
  - 【ターミナル 1】tmux attach-session -t president
  - 【ターミナル 2】tmux attach-session -t multiagent
  - 使用方法を分かりやすく説明
- [x] 🔴 プロダクト仕様書作成・要件定義整理
  - PRODUCT_SPECIFICATION.md をルートに配置
  - プロダクト概要・解決課題・ターゲットユーザーを明確化
  - 4 つの主要機能仕様と必要性を詳細記載
  - 技術仕様・ユースケース・実装優先度を整理
  - Cursor と Claude Code 両方の AI が認識可能な形式
- [x] 🔴 Claude Code 認証設定の汎用化対応完了
  - テンプレート使用者の多様な環境対応（Pro プラン/API Key）
  - setup.sh に認証設定選択機能追加（a) 認証設定メニュー）
  - 競合エラー自動解決機能実装（claude.ai ⇔ API Key 切り替え）
  - README.md に認証設定詳細説明追加（設定方法・トラブルシューティング）
  - プレジデント自動起動時のデフォルトメッセージ設定完了
  - テンプレートとして汎用的な認証選択システム実現

## 重要事項

1. 機能の実装後に、毎回 @todo.md を確認＆更新をしてください。
2. 私が言わなくても中身は随時更新するようにしてください。更新しないと私が解雇されます。あなたの責任になってしまいます。
3. 機能は増やしても構いません。ただ、最初から機能を増やしすぎないでください。
4. **今回の整理完了**: ユーザー要求通り「技術用ファイル」「セットアップ sh」「説明書 readme」「md スペルチェック無効化ファイル」のシンプル構成を実現
5. **ファイル散らかり問題解決**: 不要ファイル/ディレクトリを徹底的に削除し、クリーンな 4 要素構成を達成
6. **最終包括チェック完了**: 全 5 項目の検証を実施し、テンプレートとして優秀な品質を確認（A-評価）
